<%@ jet package="com.jeefuse.mda.gen.template.main.java.service.impl" imports="net.taylor.mda.generator.parse.NameRuled.nameRuled.* net.taylor.mda.generator.parse.NameRuled.* net.taylor.mda.generator.parse.NameRuled.className.* net.taylor.mda.generator.parse.NameRuled.* net.taylor.mda.generator.parse.stereotype.* java.util.List net.taylor.mda.generator.parse.page.* net.taylor.mda.generator.parse.* java.util.Iterator org.eclipse.uml2.uml.Class org.eclipse.uml2.uml.Package org.eclipse.uml2.uml.* net.taylor.mda.generator.util.* net.taylor.mda.generator.parse.entity.* org.eclipse.emf.codegen.util.*" class="GenericServiceImpl" %>
<%Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();%>
<%
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//generic service impl
ClassNameDefineCommon serviceGenericImplDefine=clazzWrap.getNameDefineServiceGenericImpl();
String serviceGenericImplClassName=serviceGenericImplDefine.getClassCapName();
String serviceGenericImplUncapClassName=serviceGenericImplDefine.getClassUncapName();
String serviceGenericImplPackageName=serviceGenericImplDefine.getPackageQualifiedName();

%><%@ include file="../../../../Header.jetinc"%>
package <%=serviceGenericImplPackageName%>;
<%ImportManager importManager = ImportHelper.makeImportManager("");%>
<%
// add imports
importManager.addImport("java.util.List");
importManager.addImport("org.springframework.beans.factory.annotation.Autowired");
importManager.addImport("com.jeefuse.base.modules.condition.order.Order");
importManager.addImport("com.jeefuse.base.utils.page.Page");
importManager.addImport("com.jeefuse.base.modules.condition.criteria.Condition");
//importManager.addImport("org.springframework.util.Assert");
importManager.addImport(Config.base_ServiceGenericImplQualifiedName);
String baseServiceGenericImplClassName=MdaHelper.getBriefClassName(Config.base_ServiceGenericImplQualifiedName);

//base
String baseHibernateDaoName=ImportHelper.getImportedName(Config.base_HibernateDao);
String baseHibernateDaoUncapName=NameHelper.uncapName(baseHibernateDaoName);

//model RTO define
ClassNameDefineCommon rtoDefine=clazzWrap.getNameDefineRTO();
String modelRTOQualifiedName=rtoDefine.getClassQualifiedName();
String modelRTOName=rtoDefine.getClassCapName();
importManager.addImport(modelRTOQualifiedName);

//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);

//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);

// generic service
ClassNameDefineCommon serviceGenericDefine=clazzWrap.getNameDefineServiceGeneric();
String modelServiceGenericQualifiedName=serviceGenericDefine.getClassQualifiedName();
String modelServiceGenericClassName=serviceGenericDefine.getClassCapName();
importManager.addImport(modelServiceGenericQualifiedName);
%>

<%
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());
%>

/**
 * <%=modelCommentName%> Entity CRUD service impl.
 *
 * @author <%=System.getProperty("user.name")%>
 * @generated
 */
@<%=ImportHelper.getImportedName("org.springframework.stereotype.Service")%>(value="<%=serviceGenericImplUncapClassName%>")
public class <%=serviceGenericImplClassName%> extends <%=baseServiceGenericImplClassName%><<%=modelEntityName%>, <%=EntityHelper.getIDPropertyImportType(uml2Class)%>> implements <%=modelServiceGenericClassName%>{
	public final static String SERVICE_ID = "<%=serviceGenericImplUncapClassName%>";
	
	/** 
	 * <%=serviceGenericImplClassName%> constructor with set <%=modelEntityName%> entity Class.
	 * @generated 
	 */
	@Autowired
	public <%=serviceGenericImplClassName%>(<%=baseHibernateDaoName%> <%=baseHibernateDaoUncapName%>) {
		super(<%=baseHibernateDaoUncapName%>, <%=modelEntityName%>.class);
	}

<%importManager.addImport("com.jeefuse.base.exception.ValidateViolationException");%>
<%importManager.addImport("org.springframework.transaction.annotation.Transactional");%>	
	/**
	 * 保存对象.
	 * 
	 * @generated
	 */
	@Transactional
	public <%=modelEntityName%> save(<%=modelRTOName%> rto) throws ValidateViolationException {
		<%=modelEntityName%> newModel = rto.getNewModel();
		hibernateDao.save(newModel);
		return newModel;
	}

	/**
	 * 更新对象.
	 * 
	 * @generated
	 */
	@Transactional
	public <%=modelEntityName%> update(<%=modelRTOName%> rto) throws ValidateViolationException {
<%importManager.addImport("com.jeefuse.base.exception.AppAssert");%>
		AppAssert.isNotblank(rto.getId(), "ID不能为空!");
<%/*if(EntityHelper.hasIdAssign(uml2Class)){%>		
		//for assign id
		AppAssert.isNotblank(rto.getOldId(), "更新ID不能为空!");
		if(!rto.getId().equals(rto.getOldId()))
			throw new InvalidDataException("ID不能更改!");
<%}*/%>
		<%=modelEntityName%> oldModel = get(rto.getId());
		AppAssert.notNull(oldModel, "您更新的对象不存在!");
		<%=modelEntityName%> newModel = rto.getModifiedModel(oldModel);
		// hibernateDao.update(newModel);//in session will auto update it.
		return newModel;
	}
	
	/** @generated*/
	public List<<%=modelEntityName%>> findByProperty(<%=modelFieldName%> <%=modelFieldUncapName%>, Object value){
		return findByProperty(<%=modelFieldUncapName%>.getFieldName(), value);
	}

	/** @generated*/
	public boolean isPropertyUnique(<%=modelFieldName%> <%=modelFieldUncapName%>, Object newValue){
		Object m = findUniqueByProperty(<%=modelFieldUncapName%>.getFieldName(), newValue);
		return (m == null);
	}
	
	/** @generated*/
	public Page<<%=modelEntityName%>> find(Page<<%=modelEntityName%>> page, <%=modelRTOName%> rto, Order[] orders) {
		Condition condition = Condition.and();
<%List<Property> searchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);%>
<%if(null!=searchList&&searchList.size()>0){%>
<%	int countNum=1;%>
<%	for(Property property:searchList){%>
<%		String propertyUncapSafeName=NameHelper.uncapSafeName(property);%>
<%		String propertyCommentName=TypeHelper.getDocumentationOrName(property);%>
<%/********process date property********/%>
<%		if(TypeHelper.isDate(property)&&ViewSearchHelper.isBetweenOperator(property)){%>
<%			//String operatorStr=ViewSearchHelper.getSearchOperator(property);%>
<%			String searchFieldName=ViewSearchHelper.getSearchFieldName(property);%>
<%			String searchFieldCapName=NameHelper.getCapName(searchFieldName);%>
<%			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(property);%>
<%			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);%>
		if (StringUtils.isNotBlank(rto.get<%=searchFieldCapName%>())) {//<%=countNum++%> <%=propertyCommentName%>
<%		importManager.addImport("java.util.Date");%>		
<%		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");%>	
<%		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");%>	
			Date <%=searchFieldName%> = DateUtil.getDayStart(DateUtil.parseDate(rto.get<%=searchFieldCapName%>()));
			condition.addGe(<%=modelFieldName%>.<%=propertyUncapSafeName%>.getFieldName(), <%=searchFieldName%>);
		}
		if (StringUtils.isNotBlank(rto.get<%=searchFieldTwoCapName%>())) {
			Date <%=searchFieldTwoName%> = DateUtil.getDayEnd(DateUtil.parseDate(rto.get<%=searchFieldTwoCapName%>()));
			condition.addLe(<%=modelFieldName%>.<%=propertyUncapSafeName%>.getFieldName(), <%=searchFieldTwoName%>);
		}
<%		}%>
<%/********process common property********/%>
<%		else{%>
		condition.<%=ViewSearchHelper.getSearchFieldRtoCondition(property, modelFieldName, "rto")%>;//<%=countNum++%> <%=propertyCommentName%>
<%		}%>
<% 	}%>
		return hibernateDao.find(entityClass, page, condition, orders);
<%}else{%>
		return hibernateDao.find(entityClass, page, condition, orders);
<%}%>
	}
	
<%importManager.addImport("com.jeefuse.base.web.result.ResultMsg");%>
<%importManager.addImport("java.lang.StringBuilder");%>
<%importManager.addImport("java.util.ArrayList");%>
<%importManager.addImport("org.apache.commons.lang.xwork.StringUtils");%>
<%importManager.addImport("org.apache.commons.beanutils.PropertyUtils");%>
	/** @generated */
	@Transactional
	public ResultMsg<<%=modelEntityName%>> <%=MethodNamedRuleKind.importDatas.getRuleNamed(uml2Class)%>(List<<%=modelEntityName%>> importList) throws Exception{
		ResultMsg<<%=modelEntityName%>> result = new ResultMsg<<%=modelEntityName%>>();
		if(null==importList||importList.isEmpty()){
			result.setMessage("无记录导入");
			return result;
		}
		List<<%=modelEntityName%>> addList = new ArrayList<<%=modelEntityName%>>();
		List<<%=modelEntityName%>> updateList = new ArrayList<<%=modelEntityName%>>();
		for (<%=modelEntityName%> <%=modelEntityUncapName%> : importList) {
			if (StringUtils.isBlank(<%=modelEntityUncapName%>.getId())) {
				<%=modelEntityUncapName%> .setId(null);
				addList.add(<%=modelEntityUncapName%> );
			} else {
				<%=modelEntityName%> oldModel = get(<%=modelEntityUncapName%>.getId());
				if (null == oldModel) {
					addList.add(<%=modelEntityUncapName%>);
				} else {
					PropertyUtils.copyProperties(oldModel, <%=modelEntityUncapName%>);
					updateList.add(oldModel);
				}
			}
		}
		StringBuilder msgSb = new StringBuilder("");
		int addCount = 0;
		if (!addList.isEmpty()) {
			hibernateDao.save(addList);
			addCount = addList.size();
		}
		int updateCount = 0;
		if (!updateList.isEmpty()) {
			hibernateDao.update(updateList);
			updateCount = updateList.size();
		}
		msgSb.append("共成功导入" + (addCount+updateCount) + "项记录!");
		if(addCount!=0){
			msgSb.append(" 新增:"+addCount+"项.");
		}
		if(updateCount!=0){
			msgSb.append(" 更新:"+updateCount+"项.");
		}
		result.setMessage(msgSb.toString());
		return result;
	}
<%
/*****************************************************************
 * apply keyLabel start
/*****************************************************************/
%>	
<%	if(KeyLabelStereotypeHelper.isApply(uml2Class)){%>
<%		importManager.addImport("com.jeefuse.base.modules.keyLabel.KeyLabel");%>
<%		Property listKeyProperty=KeyLabelStereotypeHelper.getProperty_liskKey(uml2Class);%>			
<%		String listKeyPropertyName=NameHelper.uncapSafeName(listKeyProperty);%>
<%		Property listLabelProperty=KeyLabelStereotypeHelper.getProperty_listLabel(uml2Class);%>	
<%		String listLabelPropertyName=NameHelper.uncapSafeName(listLabelProperty);%>		

	/**
	 * 获取所有<%=modelCommentName%>对象用于构造keyLabel,只获取key,label属性.
	 * @generated
	 */
	public List<KeyLabel> getAllForKeyLabel(){
		final String hql = "select new <%=modelEntityName%>(m.<%=listKeyPropertyName%>,m.<%=listLabelPropertyName%>) from <%=modelEntityName%> m";
		return hibernateDao.createQuery(hql).list();
	}
<%	}%>
<%
/*****************************************************************
 * apply keyLabel end
/*****************************************************************/
%>
<%
/*****************************************************************
 * 构造gallary start
/*****************************************************************/
%>
<%if(FileStereotypeHelper.isClass_Image(uml2Class)){%>
<%	//Property propertyFileSavePath=FileStereotypeHelper.getPropertyApplyFileSavePath(uml2Class);%>
<%	//Property propertyTitle=PropertyStereotypeHelper.getPropertyApplyTitle(uml2Class);%>
<%	//Property propertyIntro=PropertyStereotypeHelper.getPropertyApplyIntro(uml2Class);%>
<%	//Property propertyContent=PropertyStereotypeHelper.getPropertyApplyContent(uml2Class);%>
<%	String gallaryListContructArgs=FileStereotypeHelper.getGallaryListContructArgsForHql(uml2Class);%>

	@SuppressWarnings("unchecked")
	public List<<%=modelEntityName%>> getGallaryList(Order[] orders) {
		final String hql = "select new <%=modelEntityName%>(<%=gallaryListContructArgs%>) from <%=modelEntityName%> m";
		StringBuilder hqlsb = new StringBuilder(hql);
		if (null != orders) {
			hqlsb.append(" order by ");
			int loop = orders.length;
			for (int i = 0; i < loop; i++) {
				if(i==0){
					hqlsb.append(",");
				}
				hqlsb.append(orders[i].toSql());
			}
		}
		return hibernateDao.createQuery(hqlsb.toString()).list();
	}
<%	}%>	
<%
/*****************************************************************
 * 构造gallary end
/*****************************************************************/
%>	
<%/********process M2OPropertyList start********/%>	
<%List<Property> M2OPropertyList=EntityHelper.getAllManyToOnePropertiesAndApplyManageByProperty(uml2Class,false);%>
<%for (Iterator<Property> iter=M2OPropertyList.iterator();iter.hasNext();){%>
<%		Property property=iter.next();%>
<% 		//String propertyComment=TypeHelper.getDocumentationOrName(property);%>
<%		//String propertyGet=ClassHelper.getGetAccessor(property);%>
<% 		String propertyUncapName=NameHelper.uncapSafeName(property);%>
<% 		String propertyName=NameHelper.getCapName(property);%>
<%		UmlClassByPropertyWrap named=new UmlClassByPropertyWrap(property);%>
<%		String byPropertyValue=named.getValueName();%>
<%		String byPropertyValueCamelName=named.getValueNameWithUnderLine();%>
<%		//String byPropertyValueGetAccessor=named.getValueGetAccessor();%>

	/*****************************************************************
	 * manage by <%=named.getComment()%>
	 *****************************************************************/

	/**
	 * 查询"<%=named.getComment()%>(<%=propertyUncapName%>)"关联的"<%=modelCommentName%>(<%=modelEntityName%>)".
	 * 
	 * @generated
	 */
	public Page<<%=modelEntityName%>> findBy<%=propertyName%>(String <%=byPropertyValueCamelName%>,Page<<%=modelEntityName%>> page, <%=modelRTOName%> rto, Order[] orders) {
<%		importManager.addImport("com.jeefuse.base.exception.AppAssert");%>
		AppAssert.notNull(<%=byPropertyValueCamelName%>, "未指定<%=named.getComment()%>!");
		Condition condition = Condition.and();
		condition.addEq("<%=byPropertyValue%>", <%=byPropertyValueCamelName%>);
<%List<Property> O2MSearchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);%>
<%if(null!=O2MSearchList&&O2MSearchList.size()>0){%>
<%	int countNum=1;%>
<%	for(Property searchProperty:O2MSearchList){%>
<%		if(property.getName().equals(searchProperty.getName()))continue;%>
<%		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);%>
<%		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);%>
<%/********process date property********/%>
<%		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){%>
<%			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);%>
<%			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);%>
<%			String searchFieldCapName=NameHelper.getCapName(searchFieldName);%>
<%			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);%>
<%			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);%>
		if (StringUtils.isNotBlank(rto.get<%=searchFieldCapName%>())) {//<%=countNum++%> <%=propertyCommentName%>
<%		importManager.addImport("java.util.Date");%>		
<%		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");%>	
<%		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");%>	
			Date <%=searchFieldName%> = DateUtil.getDayStart(DateUtil.parseDate(rto.get<%=searchFieldCapName%>()));
			condition.addGe(<%=modelFieldName%>.<%=propertyUncapSafeName%>.getFieldName(), <%=searchFieldName%>);
		}
		if (StringUtils.isNotBlank(rto.get<%=searchFieldTwoCapName%>())) {
			Date <%=searchFieldTwoName%> = DateUtil.getDayEnd(DateUtil.parseDate(rto.get<%=searchFieldTwoCapName%>()));
			condition.addLe(<%=modelFieldName%>.<%=propertyUncapSafeName%>.getFieldName(), <%=searchFieldTwoName%>);
		}
<%		}%>
<%/********process common property********/%>
<%		else{%>
		condition.<%=ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto")%>;//<%=countNum++%> <%=propertyCommentName%>
<%		}%>
<% }%>
		return hibernateDao.find(entityClass, page, condition, orders);
<%}else{%>
		return hibernateDao.find(entityClass, page, condition, orders);
<%}%>
	}

	/**
	 * 查询"<%=named.getComment()%>(<%=propertyUncapName%>)"关联的"<%=modelCommentName%>(<%=modelEntityName%>)".
	 * 
	 */
	public List<<%=modelEntityName%>> findBy<%=propertyName%>(String <%=byPropertyValueCamelName%>) {
		AppAssert.notNull(<%=byPropertyValueCamelName%>, "未指定<%=named.getComment()%>!");
		Condition condition = Condition.and();
		condition.addEq("<%=byPropertyValue%>", <%=byPropertyValueCamelName%>);
		return hibernateDao.find(entityClass, condition);
	}
	
	/**
	 * 保存"<%=named.getComment()%>(<%=propertyUncapName%>)"关联的"<%=modelCommentName%>(<%=modelEntityName%>)".
	 * 
	 * @generated
	 */
	@Transactional
	public <%=modelEntityName%> saveBy<%=propertyName%>(String <%=byPropertyValueCamelName%>,<%=modelRTOName%> rto) {
		AppAssert.notNull(<%=byPropertyValueCamelName%>, "未指定<%=named.getComment()%>!");
		<%=modelEntityName%> newModel=rto.getNewModel();
		newModel.<%=named.getSetValueMethod()%>(<%=byPropertyValueCamelName%>);
		hibernateDao.save(newModel);
		return newModel;
	}

	/**
	 * 更新"<%=named.getComment()%>(<%=propertyUncapName%>)"关联的"<%=modelCommentName%>(<%=modelEntityName%>)".
	 * 
	 * @generated
	 */
	@Transactional
	public <%=modelEntityName%> updateBy<%=propertyName%>(String <%=byPropertyValueCamelName%>,<%=modelRTOName%> rto) {
		AppAssert.notNull(<%=byPropertyValueCamelName%>, "未指定<%=named.getComment()%>!");
		<%=modelEntityName%> old<%=modelEntityName%> = get(rto.getId());
		AppAssert.notNull(old<%=modelEntityName%>, "您更新的记录不存在!");
		<%=modelEntityName%> newModel = rto.getModifiedModel(old<%=modelEntityName%>);
		newModel.<%=named.getSetValueMethod()%>(<%=byPropertyValueCamelName%>);
		// hibernateDao.save(<%=modelEntityUncapName%>);//in session will auto update
		return newModel;
	}
	
	/**
	 * 删除所有"<%=named.getComment()%>(<%=propertyUncapName%>)"关联的"<%=modelCommentName%>(<%=modelEntityName%>)".
	 * 
	 * @generated
	 */
	@Transactional
	public int deleteAllBy<%=propertyName%>(String <%=byPropertyValueCamelName%>) {
		AppAssert.notNull(<%=byPropertyValueCamelName%>, "未指定<%=named.getComment()%>!");
		final String hql = "delete from " + entityClass.getName() + " m where m.<%=byPropertyValue%>=?";
		return hibernateDao.executeUpdate(hql, <%=byPropertyValueCamelName%>);
	}
	
	<%	if(KeyLabelStereotypeHelper.isApply(uml2Class)){%>
<%		importManager.addImport("com.jeefuse.base.modules.keyLabel.KeyLabel");%>
<%		Property listKeyProperty=KeyLabelStereotypeHelper.getProperty_liskKey(uml2Class);%>			
<%		String listKeyPropertyName=NameHelper.uncapSafeName(listKeyProperty);%>
<%		Property listLabelProperty=KeyLabelStereotypeHelper.getProperty_listLabel(uml2Class);%>	
<%		String listLabelPropertyName=NameHelper.uncapSafeName(listLabelProperty);%>		
	/**
	 * 根据<%=propertyName%>获取所有<%=modelCommentName%>对象用于构造keyLabel,只获取key,label属性.
	 * @generated
	 */
	public List<KeyLabel> getAllForKeyLabelBy<%=propertyName%>(String <%=byPropertyValueCamelName%>){
		AppAssert.notNull(<%=byPropertyValueCamelName%>, "未指定<%=named.getComment()%>!");
		final String hql = "select new <%=modelEntityName%>(m.<%=listKeyPropertyName%>,m.<%=listLabelPropertyName%>) from <%=modelEntityName%> m where m.<%=byPropertyValue%>=?";
		return hibernateDao.find(hql,<%=byPropertyValueCamelName%>);
	}
<%	}%>
<%}%>
<%/********process M2OPropertyList end********/%>	

}
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>
