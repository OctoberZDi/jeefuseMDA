package com.jeefuse.mda.gen.template.main.java.service.impl;

import net.taylor.mda.generator.parse.NameRuled.nameRuled.*;
import net.taylor.mda.generator.parse.NameRuled.*;
import net.taylor.mda.generator.parse.NameRuled.className.*;
import java.util.List;
import net.taylor.mda.generator.parse.page.*;
import net.taylor.mda.generator.parse.*;
import java.util.Iterator;
import org.eclipse.uml2.uml.Class;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.*;
import net.taylor.mda.generator.util.*;
import net.taylor.mda.generator.parse.entity.*;
import org.eclipse.emf.codegen.util.*;

public class GenericServiceImplForM2M
{
  protected static String nl;
  public static synchronized GenericServiceImplForM2M create(String lineSeparator)
  {
    nl = lineSeparator;
    GenericServiceImplForM2M result = new GenericServiceImplForM2M();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * Copyright (c) 2009-2013 jeefuse.com, Licensed under GPL (the \"License\")" + NL + " * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms." + NL + " * email:yonclv@gmail.com" + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * ";
  protected final String TEXT_5 = " service impl." + NL + " *" + NL + " * @author ";
  protected final String TEXT_6 = NL + " * @generated" + NL + " */" + NL + "@";
  protected final String TEXT_7 = "(value=\"";
  protected final String TEXT_8 = "\")" + NL + "public class ";
  protected final String TEXT_9 = " extends ";
  protected final String TEXT_10 = "<";
  protected final String TEXT_11 = ", ";
  protected final String TEXT_12 = "> implements ";
  protected final String TEXT_13 = "{" + NL;
  protected final String TEXT_14 = NL + "\t" + NL + "\t/*****************************************************************" + NL + "\t * ";
  protected final String TEXT_15 = " rel ";
  protected final String TEXT_16 = NL + "\t *****************************************************************/";
  protected final String TEXT_17 = NL + "\t" + NL + "\t/**" + NL + "\t * 判断";
  protected final String TEXT_18 = " 是否有";
  protected final String TEXT_19 = "." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic boolean is";
  protected final String TEXT_20 = "HasRel";
  protected final String TEXT_21 = "(String ";
  protected final String TEXT_22 = ", String ";
  protected final String TEXT_23 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_24 = ", \"";
  protected final String TEXT_25 = "标识不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_26 = ", \"";
  protected final String TEXT_27 = "标识不能为空!\");" + NL + "\t\tfinal String hql = \"select count(m) from ";
  protected final String TEXT_28 = " m where m.";
  protected final String TEXT_29 = ".id=? and m.";
  protected final String TEXT_30 = ".id=?\";" + NL + "\t\tint count = hibernateDao.findInt(hql, ";
  protected final String TEXT_31 = ", ";
  protected final String TEXT_32 = ");" + NL + "\t\treturn count > 0 ? true : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 获取";
  protected final String TEXT_33 = "关联的";
  protected final String TEXT_34 = "Id例表." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic List<String> getRel";
  protected final String TEXT_35 = "IdsBy";
  protected final String TEXT_36 = "Id(String ";
  protected final String TEXT_37 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_38 = ", \"";
  protected final String TEXT_39 = "标识不能为空\");" + NL + "\t\tfinal String hql = \"select m.";
  protected final String TEXT_40 = ".id from ";
  protected final String TEXT_41 = " m where m.";
  protected final String TEXT_42 = ".id=?\";" + NL + "\t\treturn hibernateDao.find(hql, ";
  protected final String TEXT_43 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 删除";
  protected final String TEXT_44 = "所有关联";
  protected final String TEXT_45 = ",并保存新的关联";
  protected final String TEXT_46 = "." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic void check";
  protected final String TEXT_47 = "Rel";
  protected final String TEXT_48 = "(final ";
  protected final String TEXT_49 = " ";
  protected final String TEXT_50 = ", String... ";
  protected final String TEXT_51 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_52 = ", \"";
  protected final String TEXT_53 = "不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_54 = ".getId(), \"";
  protected final String TEXT_55 = "标识不能为空!\");" + NL + "\t\tList<String> relIds = getRel";
  protected final String TEXT_56 = "IdsBy";
  protected final String TEXT_57 = "Id(";
  protected final String TEXT_58 = ".getId());" + NL + "\t\tif (null == ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\tif (null != relIds && relIds.size() > 0) {" + NL + "\t\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_60 = " m where m.";
  protected final String TEXT_61 = ".id =?\";" + NL + "\t\t\t\thibernateDao.delete(hql, ";
  protected final String TEXT_62 = ".getId());" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tList<String> checkIds = Arrays.asList(";
  protected final String TEXT_63 = ");" + NL + "\t\t// 需要添加的对象" + NL + "\t\tList<String> deleteIds = ChangeUtil.exclude(relIds, checkIds);" + NL + "\t\t// 需要删除的对象" + NL + "\t\tList<String> addIds = ChangeUtil.exclude(checkIds, relIds);" + NL + "\t\tif (null != deleteIds && !deleteIds.isEmpty()) {" + NL + "\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_64 = " m where m.";
  protected final String TEXT_65 = ".id =:";
  protected final String TEXT_66 = " and m.";
  protected final String TEXT_67 = ".id in (:deleteIds)\";" + NL + "\t\t\thibernateDao.createQuery(hql).setString(\"";
  protected final String TEXT_68 = "\", ";
  protected final String TEXT_69 = ".getId())" + NL + "\t\t\t\t\t.setParameterList(\"deleteIds\", deleteIds)" + NL + "\t\t\t\t\t.executeUpdate();" + NL + "\t\t}" + NL + "\t\tif (null != addIds && !addIds.isEmpty()) {" + NL + "\t\t\t// GsysRole gsysRole = new GsysRole();" + NL + "\t\t\t// gsysRole.setId(roleId);" + NL + "\t\t\tList<";
  protected final String TEXT_70 = "> modelList = new ArrayList<";
  protected final String TEXT_71 = ">();" + NL + "\t\t\tfor (String ";
  protected final String TEXT_72 = " : addIds) {" + NL + "\t\t\t\t";
  protected final String TEXT_73 = " ";
  protected final String TEXT_74 = " = new ";
  protected final String TEXT_75 = "();" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_76 = NL + "\t\t\t\t";
  protected final String TEXT_77 = " ";
  protected final String TEXT_78 = " = new ";
  protected final String TEXT_79 = "();" + NL + "\t\t\t\t";
  protected final String TEXT_80 = ".setId(";
  protected final String TEXT_81 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_82 = ".set";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = ");" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_85 = NL + "\t\t\t\t";
  protected final String TEXT_86 = ".set";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ");" + NL + "\t\t\t\tmodelList.add(";
  protected final String TEXT_89 = ");" + NL + "\t\t\t}" + NL + "\t\t\thibernateDao.save(modelList);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/*****************************************************************" + NL + "\t * ";
  protected final String TEXT_90 = " rel ";
  protected final String TEXT_91 = NL + "\t *****************************************************************/";
  protected final String TEXT_92 = NL + "\t" + NL + "\t/**" + NL + "\t * 判断";
  protected final String TEXT_93 = " 是否有";
  protected final String TEXT_94 = "." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic boolean is";
  protected final String TEXT_95 = "HasRel";
  protected final String TEXT_96 = "(String ";
  protected final String TEXT_97 = ", String ";
  protected final String TEXT_98 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_99 = ", \"";
  protected final String TEXT_100 = "标识不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_101 = ", \"";
  protected final String TEXT_102 = "标识不能为空!\");" + NL + "\t\tfinal String hql = \"select count(m) from ";
  protected final String TEXT_103 = " m where m.";
  protected final String TEXT_104 = ".id=? and m.";
  protected final String TEXT_105 = ".id=?\";" + NL + "\t\tint count = hibernateDao.findInt(hql, ";
  protected final String TEXT_106 = ", ";
  protected final String TEXT_107 = ");" + NL + "\t\treturn count > 0 ? true : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 获取";
  protected final String TEXT_108 = "关联的";
  protected final String TEXT_109 = "Id例表." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic List<String> getRel";
  protected final String TEXT_110 = "IdsBy";
  protected final String TEXT_111 = "Id(String ";
  protected final String TEXT_112 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_113 = ", \"";
  protected final String TEXT_114 = "标识不能为空\");" + NL + "\t\tfinal String hql = \"select m.";
  protected final String TEXT_115 = ".id from ";
  protected final String TEXT_116 = " m where m.";
  protected final String TEXT_117 = ".id=?\";" + NL + "\t\treturn hibernateDao.find(hql, ";
  protected final String TEXT_118 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 删除";
  protected final String TEXT_119 = "所有关联";
  protected final String TEXT_120 = ",并保存新的关联";
  protected final String TEXT_121 = "." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic void check";
  protected final String TEXT_122 = "Rel";
  protected final String TEXT_123 = "(final ";
  protected final String TEXT_124 = " ";
  protected final String TEXT_125 = ", String... ";
  protected final String TEXT_126 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_127 = ", \"";
  protected final String TEXT_128 = "不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_129 = ".getId(), \"";
  protected final String TEXT_130 = "标识不能为空!\");" + NL + "\t\tList<String> relIds = getRel";
  protected final String TEXT_131 = "IdsBy";
  protected final String TEXT_132 = "Id(";
  protected final String TEXT_133 = ".getId());" + NL + "\t\tif (null == ";
  protected final String TEXT_134 = ") {" + NL + "\t\t\tif (null != relIds && relIds.size() > 0) {" + NL + "\t\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_135 = " m where m.";
  protected final String TEXT_136 = ".id =?\";" + NL + "\t\t\t\thibernateDao.delete(hql, ";
  protected final String TEXT_137 = ".getId());" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tList<String> checkIds = Arrays.asList(";
  protected final String TEXT_138 = ");" + NL + "\t\t// 需要添加的对象" + NL + "\t\tList<String> deleteIds = ChangeUtil.exclude(relIds, checkIds);" + NL + "\t\t// 需要删除的对象" + NL + "\t\tList<String> addIds = ChangeUtil.exclude(checkIds, relIds);" + NL + "\t\tif (null != deleteIds && !deleteIds.isEmpty()) {" + NL + "\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_139 = " m where m.";
  protected final String TEXT_140 = ".id =:";
  protected final String TEXT_141 = " and m.";
  protected final String TEXT_142 = ".id in (:deleteIds)\";" + NL + "\t\t\thibernateDao.createQuery(hql).setString(\"";
  protected final String TEXT_143 = "\", ";
  protected final String TEXT_144 = ".getId())" + NL + "\t\t\t\t\t.setParameterList(\"deleteIds\", deleteIds)" + NL + "\t\t\t\t\t.executeUpdate();" + NL + "\t\t}" + NL + "\t\tif (null != addIds && !addIds.isEmpty()) {" + NL + "\t\t\t// GsysRole gsysRole = new GsysRole();" + NL + "\t\t\t// gsysRole.setId(roleId);" + NL + "\t\t\tList<";
  protected final String TEXT_145 = "> modelList = new ArrayList<";
  protected final String TEXT_146 = ">();" + NL + "\t\t\tfor (String ";
  protected final String TEXT_147 = " : addIds) {" + NL + "\t\t\t\t";
  protected final String TEXT_148 = " ";
  protected final String TEXT_149 = " = new ";
  protected final String TEXT_150 = "();" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_151 = NL + "\t\t\t\t";
  protected final String TEXT_152 = " ";
  protected final String TEXT_153 = " = new ";
  protected final String TEXT_154 = "();" + NL + "\t\t\t\t";
  protected final String TEXT_155 = ".setId(";
  protected final String TEXT_156 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".set";
  protected final String TEXT_158 = "(";
  protected final String TEXT_159 = ");" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_160 = NL + "\t\t\t\t";
  protected final String TEXT_161 = ".set";
  protected final String TEXT_162 = "(";
  protected final String TEXT_163 = ");" + NL + "\t\t\t\tmodelList.add(";
  protected final String TEXT_164 = ");" + NL + "\t\t\t}" + NL + "\t\t\thibernateDao.save(modelList);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_165 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();
    
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//generic service impl
ClassNameDefineCommon serviceGenericImplDefine=clazzWrap.getNameDefineServiceGenericImpl();
String serviceGenericImplClassName=serviceGenericImplDefine.getClassCapName();
String serviceGenericImplUncapClassName=serviceGenericImplDefine.getClassUncapName();
String serviceGenericImplPackageName=serviceGenericImplDefine.getPackageQualifiedName();


    stringBuffer.append(TEXT_1);
    stringBuffer.append(serviceGenericImplPackageName);
    stringBuffer.append(TEXT_2);
    ImportManager importManager = ImportHelper.makeImportManager("");
    
// add imports
importManager.addImport("java.util.List");
importManager.addImport("org.springframework.beans.factory.annotation.Autowired");
importManager.addImport("com.jeefuse.base.modules.condition.order.Order");
importManager.addImport("com.jeefuse.base.utils.page.Page");
importManager.addImport("com.jeefuse.base.modules.condition.criteria.Condition");
importManager.addImport("org.springframework.util.Assert");
importManager.addImport(Config.base_ServiceGenericImplQualifiedName);
String baseServiceGenericImplClassName=MdaHelper.getBriefClassName(Config.base_ServiceGenericImplQualifiedName);

//base
importManager.addImport(Config.base_HibernateDao);

//model RTO define
ClassNameDefineCommon rtoDefine=clazzWrap.getNameDefineRTO();
String modelRTOQualifiedName=rtoDefine.getClassQualifiedName();
importManager.addImport(modelRTOQualifiedName);

//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);

//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);

// generic service
ClassNameDefineCommon serviceGenericDefine=clazzWrap.getNameDefineServiceGeneric();
String modelServiceGenericQualifiedName=serviceGenericDefine.getClassQualifiedName();
String modelServiceGenericClassName=serviceGenericDefine.getClassCapName();
importManager.addImport(modelServiceGenericQualifiedName);

    stringBuffer.append(TEXT_3);
    
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());

    stringBuffer.append(TEXT_4);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(System.getProperty("user.name"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(ImportHelper.getImportedName("org.springframework.stereotype.Service"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(baseServiceGenericImplClassName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(EntityHelper.getIDPropertyImportType(uml2Class));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(modelServiceGenericClassName);
    stringBuffer.append(TEXT_13);
    /********rel first entity********/
    List<Property> propertyList=EntityHelper.getAllOneToManyProperties(uml2Class,false);
    Property firstProperty=propertyList.get(0);
    Class firstPropertyClass=(Class)firstProperty.getType();
    String firstPropertyModelCapName=NameHelper.getCapName(firstPropertyClass);
    String firstPropertyModelUncapName=NameHelper.getUncapName(firstPropertyClass);
    String firstPropertyModelCommentName=TypeHelper.getDocumentationOrName(firstPropertyClass);
    String firstPropertyEntityQualifiedName=MdaHelper.getEntityQualifiedName(firstPropertyClass);
    importManager.addImport(firstPropertyEntityQualifiedName);
    /********rel second entity********/
    Property secondProperty=propertyList.get(1);
    Class  secondPropertyClass=(Class)secondProperty.getType();
    String secondPropertyModelCapName=NameHelper.getCapName(firstPropertyClass);
    String secondPropertyModelUncapName=NameHelper.getUncapName(firstPropertyClass);
    String secondPropertyModelCommentName=TypeHelper.getDocumentationOrName(secondPropertyClass);
    String secondPropertyEntityQualifiedName=MdaHelper.getEntityQualifiedName(secondPropertyClass);
    importManager.addImport(secondPropertyEntityQualifiedName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_16);
    //ower
    String owerClassCapName=firstPropertyModelCapName;
    String owerClassUncapName=firstPropertyModelUncapName;
    String owerClassCommentName=firstPropertyModelCommentName;
    String owerClassId=owerClassCapName+"Id";
    //rel
    String relClassCapName=secondPropertyModelCapName;
    String relClassUncapName=secondPropertyModelUncapName;
    String relClassIds=secondPropertyModelCapName+"Ids";
    String relClassId=relClassCapName+"Id";
    String relClassCommentName=secondPropertyModelCommentName;
    stringBuffer.append(TEXT_17);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_50);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_91);
    //ower
    owerClassCapName=secondPropertyModelCapName;
    owerClassUncapName=secondPropertyModelUncapName;
    owerClassCommentName=secondPropertyModelCommentName;
    owerClassId=owerClassCapName+"Id";
    //rel
    relClassCapName=firstPropertyModelCapName;
    relClassUncapName=firstPropertyModelUncapName;
    relClassCommentName=firstPropertyModelCommentName;
    relClassId=relClassCapName+"Id";
    relClassIds=firstPropertyModelCapName+"Ids";
    stringBuffer.append(TEXT_92);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_94);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_99);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_105);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_110);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_115);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_119);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_125);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_126);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_127);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_132);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_133);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_139);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_140);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_145);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_154);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_160);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_162);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_164);
    importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());
    stringBuffer.append(TEXT_165);
    return stringBuffer.toString();
  }
}
