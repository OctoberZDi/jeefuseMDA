package com.jeefuse.mda.gen.template.main.java.service.impl;

import net.taylor.mda.generator.parse.NameRuled.nameRuled.*;
import net.taylor.mda.generator.parse.NameRuled.className.*;
import net.taylor.mda.generator.parse.NameRuled.*;
import net.taylor.mda.generator.parse.stereotype.*;
import java.util.List;
import net.taylor.mda.generator.parse.page.*;
import net.taylor.mda.generator.parse.*;
import java.util.Iterator;
import org.eclipse.uml2.uml.Class;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.*;
import net.taylor.mda.generator.util.*;
import net.taylor.mda.generator.parse.entity.*;
import org.eclipse.emf.codegen.util.*;

public class GenericServiceImplProxy
{
  protected static String nl;
  public static synchronized GenericServiceImplProxy create(String lineSeparator)
  {
    nl = lineSeparator;
    GenericServiceImplProxy result = new GenericServiceImplProxy();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * Copyright (c) 2009-2013 jeefuse.com, Licensed under GPL (the \"License\")" + NL + " * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms." + NL + " * email:yonclv@gmail.com" + NL + " */" + NL + "package ";
  protected final String TEXT_2 = ";";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * ";
  protected final String TEXT_5 = " service impl." + NL + " *" + NL + " * @author ";
  protected final String TEXT_6 = NL + " * @generated" + NL + " */" + NL + "@";
  protected final String TEXT_7 = "(value=\"";
  protected final String TEXT_8 = "\")" + NL + "public class ";
  protected final String TEXT_9 = " extends ";
  protected final String TEXT_10 = "<";
  protected final String TEXT_11 = ", ";
  protected final String TEXT_12 = "> implements ";
  protected final String TEXT_13 = "{" + NL;
  protected final String TEXT_14 = NL + "\t" + NL + "\t/*****************************************************************" + NL + "\t * ";
  protected final String TEXT_15 = " rel ";
  protected final String TEXT_16 = NL + "\t *****************************************************************/";
  protected final String TEXT_17 = NL + "\t" + NL + "\t/**" + NL + "\t * 判断";
  protected final String TEXT_18 = " 是否有";
  protected final String TEXT_19 = "." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic boolean is";
  protected final String TEXT_20 = "HasRel";
  protected final String TEXT_21 = "(String ";
  protected final String TEXT_22 = ", String ";
  protected final String TEXT_23 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_24 = ", \"";
  protected final String TEXT_25 = "标识不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_26 = ", \"";
  protected final String TEXT_27 = "标识不能为空!\");" + NL + "\t\tfinal String hql = \"select count(m) from ";
  protected final String TEXT_28 = " m where m.";
  protected final String TEXT_29 = ".id=? and m.";
  protected final String TEXT_30 = ".id=?\";" + NL + "\t\tint count = hibernateDao.findInt(hql, ";
  protected final String TEXT_31 = ", ";
  protected final String TEXT_32 = ");" + NL + "\t\treturn count > 0 ? true : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 获取";
  protected final String TEXT_33 = "关联的";
  protected final String TEXT_34 = "Id例表." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic List<String> getRel";
  protected final String TEXT_35 = "IdsBy";
  protected final String TEXT_36 = "Id(String ";
  protected final String TEXT_37 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_38 = ", \"";
  protected final String TEXT_39 = "标识不能为空\");" + NL + "\t\tfinal String hql = \"select m.";
  protected final String TEXT_40 = ".id from ";
  protected final String TEXT_41 = " m where m.";
  protected final String TEXT_42 = ".id=?\";" + NL + "\t\treturn hibernateDao.find(hql, ";
  protected final String TEXT_43 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 删除";
  protected final String TEXT_44 = "所有关联";
  protected final String TEXT_45 = ",并保存新的关联";
  protected final String TEXT_46 = "." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic void check";
  protected final String TEXT_47 = "Rel";
  protected final String TEXT_48 = "(final ";
  protected final String TEXT_49 = " ";
  protected final String TEXT_50 = ", String... ";
  protected final String TEXT_51 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_52 = ", \"";
  protected final String TEXT_53 = "不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_54 = ".getId(), \"";
  protected final String TEXT_55 = "标识不能为空!\");" + NL + "\t\tList<String> relIds = getRel";
  protected final String TEXT_56 = "IdsBy";
  protected final String TEXT_57 = "Id(";
  protected final String TEXT_58 = ".getId());" + NL + "\t\tif (null == ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\tif (null != relIds && relIds.size() > 0) {" + NL + "\t\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_60 = " m where m.";
  protected final String TEXT_61 = ".id =?\";" + NL + "\t\t\t\thibernateDao.delete(hql, ";
  protected final String TEXT_62 = ".getId());" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tList<String> checkIds = Arrays.asList(";
  protected final String TEXT_63 = ");" + NL + "\t\t// 需要添加的对象" + NL + "\t\tList<String> deleteIds = ChangeUtil.exclude(relIds, checkIds);" + NL + "\t\t// 需要删除的对象" + NL + "\t\tList<String> addIds = ChangeUtil.exclude(checkIds, relIds);" + NL + "\t\tif (null != deleteIds && !deleteIds.isEmpty()) {" + NL + "\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_64 = " m where m.";
  protected final String TEXT_65 = ".id =:";
  protected final String TEXT_66 = " and m.";
  protected final String TEXT_67 = ".id in (:deleteIds)\";" + NL + "\t\t\thibernateDao.createQuery(hql).setString(\"";
  protected final String TEXT_68 = "\", ";
  protected final String TEXT_69 = ".getId())" + NL + "\t\t\t\t\t.setParameterList(\"deleteIds\", deleteIds)" + NL + "\t\t\t\t\t.executeUpdate();" + NL + "\t\t}" + NL + "\t\tif (null != addIds && !addIds.isEmpty()) {" + NL + "\t\t\t// GsysRole gsysRole = new GsysRole();" + NL + "\t\t\t// gsysRole.setId(roleId);" + NL + "\t\t\tList<";
  protected final String TEXT_70 = "> modelList = new ArrayList<";
  protected final String TEXT_71 = ">();" + NL + "\t\t\tfor (String ";
  protected final String TEXT_72 = " : addIds) {" + NL + "\t\t\t\t";
  protected final String TEXT_73 = " ";
  protected final String TEXT_74 = " = new ";
  protected final String TEXT_75 = "();" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_76 = NL + "\t\t\t\t";
  protected final String TEXT_77 = " ";
  protected final String TEXT_78 = " = new ";
  protected final String TEXT_79 = "();" + NL + "\t\t\t\t";
  protected final String TEXT_80 = ".setId(";
  protected final String TEXT_81 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_82 = ".set";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = ");" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_85 = NL + "\t\t\t\t";
  protected final String TEXT_86 = ".set";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ");" + NL + "\t\t\t\tmodelList.add(";
  protected final String TEXT_89 = ");" + NL + "\t\t\t}" + NL + "\t\t\thibernateDao.save(modelList);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/*****************************************************************" + NL + "\t * ";
  protected final String TEXT_90 = " rel ";
  protected final String TEXT_91 = NL + "\t *****************************************************************/";
  protected final String TEXT_92 = NL + "\t" + NL + "\t/**" + NL + "\t * 判断";
  protected final String TEXT_93 = " 是否有";
  protected final String TEXT_94 = "." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic boolean is";
  protected final String TEXT_95 = "HasRel";
  protected final String TEXT_96 = "(String ";
  protected final String TEXT_97 = ", String ";
  protected final String TEXT_98 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_99 = ", \"";
  protected final String TEXT_100 = "标识不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_101 = ", \"";
  protected final String TEXT_102 = "标识不能为空!\");" + NL + "\t\tfinal String hql = \"select count(m) from ";
  protected final String TEXT_103 = " m where m.";
  protected final String TEXT_104 = ".id=? and m.";
  protected final String TEXT_105 = ".id=?\";" + NL + "\t\tint count = hibernateDao.findInt(hql, ";
  protected final String TEXT_106 = ", ";
  protected final String TEXT_107 = ");" + NL + "\t\treturn count > 0 ? true : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 获取";
  protected final String TEXT_108 = "关联的";
  protected final String TEXT_109 = "Id例表." + NL + " \t * @generated" + NL + "\t */" + NL + "\tpublic List<String> getRel";
  protected final String TEXT_110 = "IdsBy";
  protected final String TEXT_111 = "Id(String ";
  protected final String TEXT_112 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_113 = ", \"";
  protected final String TEXT_114 = "标识不能为空\");" + NL + "\t\tfinal String hql = \"select m.";
  protected final String TEXT_115 = ".id from ";
  protected final String TEXT_116 = " m where m.";
  protected final String TEXT_117 = ".id=?\";" + NL + "\t\treturn hibernateDao.find(hql, ";
  protected final String TEXT_118 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 删除";
  protected final String TEXT_119 = "所有关联";
  protected final String TEXT_120 = ",并保存新的关联";
  protected final String TEXT_121 = "." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic void check";
  protected final String TEXT_122 = "Rel";
  protected final String TEXT_123 = "(final ";
  protected final String TEXT_124 = " ";
  protected final String TEXT_125 = ", String... ";
  protected final String TEXT_126 = "){" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_127 = ", \"";
  protected final String TEXT_128 = "不能为空!\");" + NL + "\t\tAssert.notNull(";
  protected final String TEXT_129 = ".getId(), \"";
  protected final String TEXT_130 = "标识不能为空!\");" + NL + "\t\tList<String> relIds = getRel";
  protected final String TEXT_131 = "IdsBy";
  protected final String TEXT_132 = "Id(";
  protected final String TEXT_133 = ".getId());" + NL + "\t\tif (null == ";
  protected final String TEXT_134 = ") {" + NL + "\t\t\tif (null != relIds && relIds.size() > 0) {" + NL + "\t\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_135 = " m where m.";
  protected final String TEXT_136 = ".id =?\";" + NL + "\t\t\t\thibernateDao.delete(hql, ";
  protected final String TEXT_137 = ".getId());" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tList<String> checkIds = Arrays.asList(";
  protected final String TEXT_138 = ");" + NL + "\t\t// 需要添加的对象" + NL + "\t\tList<String> deleteIds = ChangeUtil.exclude(relIds, checkIds);" + NL + "\t\t// 需要删除的对象" + NL + "\t\tList<String> addIds = ChangeUtil.exclude(checkIds, relIds);" + NL + "\t\tif (null != deleteIds && !deleteIds.isEmpty()) {" + NL + "\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_139 = " m where m.";
  protected final String TEXT_140 = ".id =:";
  protected final String TEXT_141 = " and m.";
  protected final String TEXT_142 = ".id in (:deleteIds)\";" + NL + "\t\t\thibernateDao.createQuery(hql).setString(\"";
  protected final String TEXT_143 = "\", ";
  protected final String TEXT_144 = ".getId())" + NL + "\t\t\t\t\t.setParameterList(\"deleteIds\", deleteIds)" + NL + "\t\t\t\t\t.executeUpdate();" + NL + "\t\t}" + NL + "\t\tif (null != addIds && !addIds.isEmpty()) {" + NL + "\t\t\t// GsysRole gsysRole = new GsysRole();" + NL + "\t\t\t// gsysRole.setId(roleId);" + NL + "\t\t\tList<";
  protected final String TEXT_145 = "> modelList = new ArrayList<";
  protected final String TEXT_146 = ">();" + NL + "\t\t\tfor (String ";
  protected final String TEXT_147 = " : addIds) {" + NL + "\t\t\t\t";
  protected final String TEXT_148 = " ";
  protected final String TEXT_149 = " = new ";
  protected final String TEXT_150 = "();" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_151 = NL + "\t\t\t\t";
  protected final String TEXT_152 = " ";
  protected final String TEXT_153 = " = new ";
  protected final String TEXT_154 = "();" + NL + "\t\t\t\t";
  protected final String TEXT_155 = ".setId(";
  protected final String TEXT_156 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".set";
  protected final String TEXT_158 = "(";
  protected final String TEXT_159 = ");" + NL + "\t\t\t\t// rel ";
  protected final String TEXT_160 = NL + "\t\t\t\t";
  protected final String TEXT_161 = ".set";
  protected final String TEXT_162 = "(";
  protected final String TEXT_163 = ");" + NL + "\t\t\t\tmodelList.add(";
  protected final String TEXT_164 = ");" + NL + "\t\t\t}" + NL + "\t\t\thibernateDao.save(modelList);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_165 = "/*" + NL + " * Copyright (c) 2009-2013 jeefuse.com, Licensed under GPL (the \"License\")" + NL + " * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms." + NL + " * email:yonclv@gmail.com" + NL + " */" + NL + "package ";
  protected final String TEXT_166 = ";";
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = NL + NL + "/**" + NL + " * ";
  protected final String TEXT_169 = " Entity CRUD service impl." + NL + " *" + NL + " * @author ";
  protected final String TEXT_170 = NL + " * @generated" + NL + " */" + NL + "@";
  protected final String TEXT_171 = "(value=\"";
  protected final String TEXT_172 = "\")" + NL + "public class ";
  protected final String TEXT_173 = " extends ";
  protected final String TEXT_174 = "<";
  protected final String TEXT_175 = ", ";
  protected final String TEXT_176 = "> implements ";
  protected final String TEXT_177 = "{";
  protected final String TEXT_178 = NL + "\tpublic final static String SERVICE_ID = \"";
  protected final String TEXT_179 = "\";" + NL + "\tprivate final static int LAYER_LEN = TreeLayerCodeUtil.defaultLayerLen;" + NL + "\tprivate final static int LAYER_MAX_DEEP = ";
  protected final String TEXT_180 = ";" + NL + "\tprivate static final OrderSet DEFAULT_ORDERSET = OrderSet.create(";
  protected final String TEXT_181 = ".";
  protected final String TEXT_182 = ".getFieldName(), OrderMode.";
  protected final String TEXT_183 = ");" + NL + "" + NL + "\t/** " + NL + "\t * ";
  protected final String TEXT_184 = " constructor with set ";
  protected final String TEXT_185 = " entity Class." + NL + "\t * @generated " + NL + "\t */" + NL + "\t@Autowired" + NL + "\tpublic ";
  protected final String TEXT_186 = "(";
  protected final String TEXT_187 = " ";
  protected final String TEXT_188 = ") {" + NL + "\t\tsuper(";
  protected final String TEXT_189 = ", ";
  protected final String TEXT_190 = ".class);" + NL + "\t}" + NL;
  protected final String TEXT_191 = "\t";
  protected final String TEXT_192 = NL + "\t/**" + NL + "\t * 保存对象,添加树形layerCode支持." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_193 = " save(";
  protected final String TEXT_194 = " rto) {" + NL + "\t\t";
  protected final String TEXT_195 = " newModel = rto.getNewModel();" + NL + "\t\t";
  protected final String TEXT_196 = " parent = null;" + NL + "\t\tif (StringUtils.isNotBlank(newModel.getParentId())) {" + NL + "\t\t\tparent = get(newModel.getParentId());" + NL + "\t\t\tif (null == parent)" + NL + "\t\t\t\tthrow new DataNoExistException(\"上级节点不存在!\");" + NL + "\t\t}" + NL + "\t\tString nextLayerCode = getNextLayerCode(newModel.getParentId());" + NL + "\t\tnewModel.setLayerCode(nextLayerCode);" + NL + "\t\t// 注意:hibernate会管理会话中的状态,如果先设置父节点,将会认为数据库中以存在该状态,设置layerCode时将不正确" + NL + "\t\tnewModel.setParent(parent);" + NL + "\t\thibernateDao.save(newModel);" + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新对象,添加树形layerCode." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_197 = " update(";
  protected final String TEXT_198 = " rto) {" + NL + "\t\t";
  protected final String TEXT_199 = " oldModel = get(rto.getId());" + NL + "\t\tAssert.notNull(oldModel, \"您更新的对象不存在!\");" + NL + "\t\t";
  protected final String TEXT_200 = " parent = null;" + NL + "\t\tif (StringUtils.isNotBlank(rto.getParentId())) {" + NL + "\t\t\tparent = get(rto.getParentId());" + NL + "\t\t\tif (null == parent)" + NL + "\t\t\t\tthrow new DataNoExistException(\"上级节点不存在!\");" + NL + "\t\t}" + NL + "\t\tString oldParendId = oldModel.getParentId();" + NL + "\t\tString oldLayerCode = oldModel.getLayerCode();" + NL + "\t\t";
  protected final String TEXT_201 = " newModel = null;" + NL + "\t\t// 未设置上级节点" + NL + "\t\tif (null == oldParendId && rto.getParentId() == null) {" + NL + "\t\t\tnewModel = rto.getModifiedModel(oldModel);" + NL + "\t\t}" + NL + "\t\t// 上级节相同时" + NL + "\t\telse if (null != oldParendId && oldParendId.equals(rto.getParentId())) {" + NL + "\t\t\tnewModel = rto.getModifiedModel(oldModel);" + NL + "\t\t}" + NL + "\t\t// 上级节点变更时,同时更改层次节点" + NL + "\t\telse {" + NL + "\t\t\t// 获取当前层次代码" + NL + "\t\t\tString newLayerCode = getNextLayerCode(rto.getParentId());" + NL + "\t\t\t// 重新设置子对象的层次代码" + NL + "\t\t\tupdateDescendant(oldLayerCode, newLayerCode, false);" + NL + "\t\t\tnewModel = rto.getModifiedModel(oldModel);" + NL + "\t\t\tnewModel.setLayerCode(newLayerCode);" + NL + "\t\t}" + NL + "\t\t// 注意:hibernate会管理会话中的状态,如果先设置父节点,将会认为数据库中以存在该状态,设置layerCode时将不正确" + NL + "\t\tnewModel.setParent(parent);" + NL + "\t\t// hibernateDao.update(newModel);//in session hibernate will auto update it." + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * (non-Javadoc)" + NL + "\t * " + NL + "\t * @see" + NL + "\t * com.jeefuse.base.service.impl.GenericServiceImpl#getAll(com.jeefuse.base.modules.condition.order.Order[])" + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Override" + NL + "\tpublic List<";
  protected final String TEXT_202 = "> getAll(Order... orders) {" + NL + "\t\treturn super.getAll(buildOrderSet(orders).toOrderArray());" + NL + "\t}" + NL + "\t";
  protected final String TEXT_203 = NL + "\t/** @generated */" + NL + "\tprivate OrderSet buildOrderSet(Order... orders) {" + NL + "\t\tOrderSet orderSet = null;" + NL + "\t\tif (null == orders) {" + NL + "\t\t\torderSet = DEFAULT_ORDERSET;" + NL + "\t\t} else {" + NL + "\t\t\torderSet = OrderSet.create(orders);" + NL + "\t\t}" + NL + "\t\treturn orderSet;" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\tpublic List<";
  protected final String TEXT_204 = "> findByProperty(";
  protected final String TEXT_205 = " ";
  protected final String TEXT_206 = ", Object value){" + NL + "\t\treturn findByProperty(";
  protected final String TEXT_207 = ".getFieldName(), value);" + NL + "\t}" + NL + "" + NL + "\t/** @generated*/" + NL + "\tpublic boolean isPropertyUnique(";
  protected final String TEXT_208 = " ";
  protected final String TEXT_209 = ", Object newValue){" + NL + "\t\tObject m = findUniqueByProperty(";
  protected final String TEXT_210 = ".getFieldName(), newValue);" + NL + "\t\treturn (m == null);" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\tpublic Page<";
  protected final String TEXT_211 = "> find(Page<";
  protected final String TEXT_212 = "> page, ";
  protected final String TEXT_213 = " rto, Order[] orders) {" + NL + "\t\tCondition condition = Condition.and();";
  protected final String TEXT_214 = NL + "\t\tif (null != rto) {";
  protected final String TEXT_215 = NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_216 = "())) {//";
  protected final String TEXT_217 = " ";
  protected final String TEXT_218 = "\t\t";
  protected final String TEXT_219 = "\t";
  protected final String TEXT_220 = "\t" + NL + "\t\t\tDate ";
  protected final String TEXT_221 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_222 = "()));" + NL + "\t\t\tcondition.addGe(";
  protected final String TEXT_223 = ".";
  protected final String TEXT_224 = ".getFieldName(), ";
  protected final String TEXT_225 = ");" + NL + "\t\t}" + NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_226 = "())) {" + NL + "\t\t\tDate ";
  protected final String TEXT_227 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_228 = "()));" + NL + "\t\t\tcondition.addLe(";
  protected final String TEXT_229 = ".";
  protected final String TEXT_230 = ".getFieldName(), ";
  protected final String TEXT_231 = ");" + NL + "\t\t}";
  protected final String TEXT_232 = NL + "\t\tcondition.";
  protected final String TEXT_233 = ";//";
  protected final String TEXT_234 = " ";
  protected final String TEXT_235 = NL + "\t\t}" + NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_236 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_237 = NL + "\t}" + NL + "\t";
  protected final String TEXT_238 = NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\tpublic ResultMsg<";
  protected final String TEXT_239 = "> ";
  protected final String TEXT_240 = "(List<";
  protected final String TEXT_241 = "> importList) {" + NL + "\t\tResultMsg<";
  protected final String TEXT_242 = "> result = new ResultMsg<";
  protected final String TEXT_243 = ">();" + NL + "\t\tif(null==importList||importList.isEmpty()){" + NL + "\t\t\tresult.setMessage(\"无记录导入\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\tList<";
  protected final String TEXT_244 = "> addList = new ArrayList<";
  protected final String TEXT_245 = ">();" + NL + "\t\tList<";
  protected final String TEXT_246 = "> updateList = new ArrayList<";
  protected final String TEXT_247 = ">();" + NL + "\t\tfor (";
  protected final String TEXT_248 = " ";
  protected final String TEXT_249 = " : importList) {" + NL + "\t\t\tif (StringUtils.isBlank(";
  protected final String TEXT_250 = ".getId())) {" + NL + "\t\t\t\t";
  protected final String TEXT_251 = " .setId(null);" + NL + "\t\t\t\taddList.add(";
  protected final String TEXT_252 = " );" + NL + "\t\t\t} else {" + NL + "\t\t\t\tupdateList.add(";
  protected final String TEXT_253 = ");" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\thibernateDao.save(addList);" + NL + "\t\thibernateDao.update(updateList);" + NL + "\t\tStringBuilder msgSb = new StringBuilder(\"\");" + NL + "\t\tint addCount = addList.size();" + NL + "\t\tint updateCount = updateList.size();" + NL + "\t\tmsgSb.append(\"共成功导入\" + (addCount+updateCount) + \"项记录!\");" + NL + "\t\tif(addCount!=0){" + NL + "\t\t\tmsgSb.append(\" 新增:\"+addCount+\"项.\");" + NL + "\t\t}" + NL + "\t\tif(updateCount!=0){" + NL + "\t\t\tmsgSb.append(\" 更新:\"+updateCount+\"项.\");" + NL + "\t\t}" + NL + "\t\tresult.setMessage(msgSb.toString());" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/*****************************************************************" + NL + "\t * 树形操作" + NL + "\t/*****************************************************************/" + NL + "\t" + NL + "\t/**" + NL + "\t * 根据层次代码获取所有后代对象," + NL + "\t * " + NL + "\t * @param layerCode" + NL + "\t *            层次代码" + NL + "\t * @param includeCurrent" + NL + "\t *            是否包含当前层次代码的对象" + NL + "\t * @generated" + NL + "\t */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<";
  protected final String TEXT_254 = "> findDescendantByLayerCode(String layerCode, boolean includeCurrent) {" + NL + "\t\tif (includeCurrent) {" + NL + "\t\t\tfinal String hql = \"from ";
  protected final String TEXT_255 = " m where  m.layerCode like ?\";" + NL + "\t\t\treturn hibernateDao.find(hql, layerCode + \"%\");" + NL + "\t\t} else {" + NL + "\t\t\tfinal String hql = \"from ";
  protected final String TEXT_256 = " m where  m.layerCode like ? and m.layerCode!=?\";" + NL + "\t\t\treturn hibernateDao.find(hql, layerCode + \"%\", layerCode);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 根据层次代码获取所有后代对象," + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_257 = "> findDescendant(Page<";
  protected final String TEXT_258 = "> page, ";
  protected final String TEXT_259 = " rto, Order[] orders) {" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tif (null != rto) {";
  protected final String TEXT_260 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_261 = "())) {//";
  protected final String TEXT_262 = " ";
  protected final String TEXT_263 = "\t\t";
  protected final String TEXT_264 = "\t";
  protected final String TEXT_265 = "\t" + NL + "\t\t\t\tDate ";
  protected final String TEXT_266 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_267 = "()));" + NL + "\t\t\t\tcondition.addGe(";
  protected final String TEXT_268 = ".";
  protected final String TEXT_269 = ".getFieldName(), ";
  protected final String TEXT_270 = ");" + NL + "\t\t\t}" + NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_271 = "())) {" + NL + "\t\t\t\tDate ";
  protected final String TEXT_272 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_273 = "()));" + NL + "\t\t\t\tcondition.addLe(";
  protected final String TEXT_274 = ".";
  protected final String TEXT_275 = ".getFieldName(), ";
  protected final String TEXT_276 = ");" + NL + "\t\t\t}";
  protected final String TEXT_277 = NL + "\t\t\tcondition.";
  protected final String TEXT_278 = ";//";
  protected final String TEXT_279 = " ";
  protected final String TEXT_280 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.getParentId())) {" + NL + "\t\t\t\t";
  protected final String TEXT_281 = " model = get(rto.getParentId());" + NL + "\t\t\t\tif (null != model) {" + NL + "\t\t\t\t\tcondition.addStartsLike(";
  protected final String TEXT_282 = ".layerCode.getFieldName(), model.getLayerCode());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 获取层次代码." + NL + "\t * " + NL + "\t * @param parentId" + NL + "\t *            上级ID" + NL + "\t * @generated" + NL + "\t */" + NL + "\tprivate String getNextLayerCode(String parentId) throws DataNoExistException {" + NL + "\t\tString maxLayerCode = null;" + NL + "\t\t// 有上级节点" + NL + "\t\tif (StringUtils.isNotBlank(parentId)) {" + NL + "\t\t\tfinal String hql = \"select m.layerCode from ";
  protected final String TEXT_283 = " m where m.id=?\";" + NL + "\t\t\tString parentLayerCode = (String) hibernateDao.findUnique(hql, parentId);" + NL + "\t\t\tif (null == parentLayerCode)" + NL + "\t\t\t\tthrow new DataNoExistException(\"上级不存在或其层次代码为空!\");" + NL + "\t\t\tif ((parentLayerCode.length() / LAYER_LEN + 1) > LAYER_MAX_DEEP)" + NL + "\t\t\t\tthrow new InvalidDataException(\"最大不能超过\"+LAYER_MAX_DEEP+\"级层次!\");" + NL + "\t\t\tif (!TreeLayerCodeUtil.isValideLayerCode(parentLayerCode, LAYER_LEN))" + NL + "\t\t\t\tthrow new InvalidDataException(\"上级层次代码错误!请删除上级节点!\");" + NL + "\t\t\tfinal String maxChildrenLayerhql = \"select max(layerCode) from ";
  protected final String TEXT_284 = " m where m.parent.id=?\";" + NL + "\t\t\tmaxLayerCode = (String) hibernateDao.findUnique(maxChildrenLayerhql, parentId);" + NL + "\t\t\tif (null == maxLayerCode)" + NL + "\t\t\t\treturn parentLayerCode + TreeLayerCodeUtil.getNextLayerCode(null, LAYER_LEN);" + NL + "\t\t\treturn TreeLayerCodeUtil.getNextLayerCode(maxLayerCode, LAYER_LEN);" + NL + "\t\t}" + NL + "\t\t// 没有上级节点" + NL + "\t\tfinal String maxChildrenLayerhql = \"select max(layerCode) from ";
  protected final String TEXT_285 = " m where m.parent is null\";" + NL + "\t\tmaxLayerCode = (String) hibernateDao.findUnique(maxChildrenLayerhql);" + NL + "\t\treturn TreeLayerCodeUtil.getNextLayerCode(maxLayerCode, LAYER_LEN);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新层次代码." + NL + "\t * " + NL + "\t * @param oldLayerCode" + NL + "\t *            更新前的层次代码" + NL + "\t * @param newLayerCode" + NL + "\t *            更新后的层次代码" + NL + "\t * @param includeCurrent" + NL + "\t *            是否包含当前层次代码的对象" + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tprivate void updateDescendant(String oldLayerCode, String newLayerCode, boolean includeCurrent) {" + NL + "\t\tList<";
  protected final String TEXT_286 = "> updateList = findDescendantByLayerCode(oldLayerCode, false);" + NL + "\t\tif (null != updateList && !updateList.isEmpty()) {" + NL + "\t\t\tfor (";
  protected final String TEXT_287 = " ";
  protected final String TEXT_288 = " : updateList) {" + NL + "\t\t\t\tString curLayerCode = ";
  protected final String TEXT_289 = ".getLayerCode();" + NL + "\t\t\t\tString replaceLayerCode = newLayerCode == null ? \"\" : newLayerCode;" + NL + "\t\t\t\t";
  protected final String TEXT_290 = ".setLayerCode(curLayerCode.replaceFirst(oldLayerCode, replaceLayerCode));" + NL + "\t\t\t\tif (StringUtils.isBlank(newLayerCode)) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_291 = ".setParent(null);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t// hibernateDao.update(updateList);in session don't need update" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/** @generated */" + NL + "\tpublic boolean hasChildren(String[] ids) {" + NL + "\t\tfor (String id : ids) {" + NL + "\t\t\tCondition condition = Condition.and();" + NL + "\t\t\tcondition.addEqIfNotBlank(";
  protected final String TEXT_292 = ".parentId.getFieldName(), id);" + NL + "\t\t\tlong count = hibernateDao.countFind(entityClass, condition);" + NL + "\t\t\tif (count > 0)" + NL + "\t\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\t@Override" + NL + "\tpublic int delete(String... ids) {" + NL + "\t\tint count = 0;" + NL + "\t\tfor (String id : ids) {" + NL + "\t\t\t";
  protected final String TEXT_293 = " model = get(id);" + NL + "\t\t\tupdateDescendant(model.getLayerCode(), null, false);" + NL + "\t\t\thibernateDao.delete(model);" + NL + "\t\t\tcount++;" + NL + "\t\t}" + NL + "\t\treturn count;" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\tpublic int deleteDescendant(String[] ids) {" + NL + "\t\tint count = 0;" + NL + "\t\tfor (String id : ids) {" + NL + "\t\t\t";
  protected final String TEXT_294 = " model = get(id);" + NL + "\t\t\t// 批量删除" + NL + "\t\t\tfinal String hql = \"delete from ";
  protected final String TEXT_295 = " m where  m.layerCode like ?\";" + NL + "\t\t\tcount += hibernateDao.executeUpdate(hql, model.getLayerCode() + \"%\");" + NL + "\t\t}" + NL + "\t\treturn count;" + NL + "\t}" + NL;
  protected final String TEXT_296 = NL + "\t/** @generated */" + NL + "\tprivate OrderSet buildOrderSet(Order... orders) {" + NL + "\t\tOrderSet orderSet = null;" + NL + "\t\tif (null == orders) {" + NL + "\t\t\torderSet = OrderSet.create(";
  protected final String TEXT_297 = ".";
  protected final String TEXT_298 = ".getFieldName(), OrderMode.";
  protected final String TEXT_299 = ");" + NL + "\t\t} else {" + NL + "\t\t\torderSet = OrderSet.create(orders);" + NL + "\t\t}" + NL + "\t\treturn orderSet;" + NL + "\t}";
  protected final String TEXT_300 = "\t";
  protected final String TEXT_301 = "\t";
  protected final String TEXT_302 = "\t";
  protected final String TEXT_303 = "\t\t\t";
  protected final String TEXT_304 = "\t";
  protected final String TEXT_305 = "\t\t\t";
  protected final String TEXT_306 = "\t\t\t";
  protected final String TEXT_307 = NL + "\t/** @generated */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<TreeViewItem> getAllForTreeview(OrderSet orderSet) {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_308 = "(m.";
  protected final String TEXT_309 = ",m.";
  protected final String TEXT_310 = ",m.parent.";
  protected final String TEXT_311 = ") from ";
  protected final String TEXT_312 = " m\";" + NL + "\t\tStringBuilder selectHqlsb = new StringBuilder(hql);" + NL + "\t\tif (null != orderSet) {" + NL + "\t\t\tselectHqlsb.append(orderSet.toOrderBySql());" + NL + "\t\t} else {" + NL + "\t\t\tselectHqlsb.append(buildOrderSet().toOrderBySql());" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.createQuery(selectHqlsb.toString()).list();" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<TreeViewItem> getChildrenForTreeview(String parentId) {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_313 = "(m.";
  protected final String TEXT_314 = ",m.";
  protected final String TEXT_315 = ",m.parent.";
  protected final String TEXT_316 = ") from ";
  protected final String TEXT_317 = " m\";" + NL + "\t\tStringBuilder hqlSb = new StringBuilder(hql);" + NL + "\t\tif (StringUtils.isBlank(parentId)) {" + NL + "\t\t\thqlSb.append(\" where m.parent is null\");" + NL + "\t\t\thqlSb.append(buildOrderSet().toOrderBySql());" + NL + "\t\t\treturn hibernateDao.find(hqlSb.toString());" + NL + "\t\t} else {" + NL + "\t\t\thqlSb.append(\" where m.parent = ?\");" + NL + "\t\t\thqlSb.append(buildOrderSet().toOrderBySql());" + NL + "\t\t\treturn hibernateDao.find(hqlSb.toString(), parentId);" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_318 = "\t\t\t";
  protected final String TEXT_319 = "\t\t\t";
  protected final String TEXT_320 = "\t";
  protected final String TEXT_321 = "\t";
  protected final String TEXT_322 = "\t";
  protected final String TEXT_323 = "\t";
  protected final String TEXT_324 = "\t" + NL + "\t/**" + NL + "\t * 获取所有";
  protected final String TEXT_325 = "对象用于构造keyLabel,只获取key,label属性." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<KeyLabel> ";
  protected final String TEXT_326 = "(){" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_327 = "(m.";
  protected final String TEXT_328 = ",m.";
  protected final String TEXT_329 = ") from ";
  protected final String TEXT_330 = " m\";" + NL + "\t\treturn hibernateDao.createQuery(hql).list();" + NL + "\t}";
  protected final String TEXT_331 = "\t";
  protected final String TEXT_332 = NL + "\t" + NL + "\t/*****************************************************************" + NL + "\t * manage by ";
  protected final String TEXT_333 = "(";
  protected final String TEXT_334 = ")" + NL + "\t *****************************************************************/" + NL + "" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_335 = "(";
  protected final String TEXT_336 = ")\"关联的\"";
  protected final String TEXT_337 = "(";
  protected final String TEXT_338 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_339 = "> findBy";
  protected final String TEXT_340 = "(String ";
  protected final String TEXT_341 = ",Page<";
  protected final String TEXT_342 = "> page, ";
  protected final String TEXT_343 = " rto, Order[] orders) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_344 = ", \"未指定";
  protected final String TEXT_345 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_346 = "\", ";
  protected final String TEXT_347 = ");";
  protected final String TEXT_348 = NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_349 = "())) {//";
  protected final String TEXT_350 = " ";
  protected final String TEXT_351 = "\t\t";
  protected final String TEXT_352 = "\t";
  protected final String TEXT_353 = "\t" + NL + "\t\t\tDate ";
  protected final String TEXT_354 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_355 = "()));" + NL + "\t\t\tcondition.addGe(";
  protected final String TEXT_356 = ".";
  protected final String TEXT_357 = ".getFieldName(), ";
  protected final String TEXT_358 = ");" + NL + "\t\t}" + NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_359 = "())) {" + NL + "\t\t\tDate ";
  protected final String TEXT_360 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_361 = "()));" + NL + "\t\t\tcondition.addLe(";
  protected final String TEXT_362 = ".";
  protected final String TEXT_363 = ".getFieldName(), ";
  protected final String TEXT_364 = ");" + NL + "\t\t}";
  protected final String TEXT_365 = NL + "\t\tcondition.";
  protected final String TEXT_366 = ";//";
  protected final String TEXT_367 = " ";
  protected final String TEXT_368 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_369 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_370 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_371 = "(";
  protected final String TEXT_372 = ")\"关联的\"";
  protected final String TEXT_373 = "(";
  protected final String TEXT_374 = ")\"." + NL + "\t * " + NL + "\t */" + NL + "\tpublic List<";
  protected final String TEXT_375 = "> findBy";
  protected final String TEXT_376 = "(String ";
  protected final String TEXT_377 = ") {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_378 = ", \"未指定";
  protected final String TEXT_379 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_380 = "\", ";
  protected final String TEXT_381 = ");" + NL + "\t\treturn hibernateDao.find(entityClass, condition);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_382 = "(";
  protected final String TEXT_383 = ")\"关联的\"";
  protected final String TEXT_384 = "(";
  protected final String TEXT_385 = ")\",根据层次代码获取所有后代对象," + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_386 = "> findDescendantBy";
  protected final String TEXT_387 = "(String ";
  protected final String TEXT_388 = ", Page<";
  protected final String TEXT_389 = "> page,";
  protected final String TEXT_390 = " rto, Order[] orders) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_391 = ", \"未指定";
  protected final String TEXT_392 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_393 = "\", ";
  protected final String TEXT_394 = ");" + NL + "\t\tif (null != rto) {";
  protected final String TEXT_395 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_396 = "())) {//";
  protected final String TEXT_397 = " ";
  protected final String TEXT_398 = "\t\t";
  protected final String TEXT_399 = "\t";
  protected final String TEXT_400 = "\t" + NL + "\t\t\t\tDate ";
  protected final String TEXT_401 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_402 = "()));" + NL + "\t\t\t\tcondition.addGe(";
  protected final String TEXT_403 = ".";
  protected final String TEXT_404 = ".getFieldName(), ";
  protected final String TEXT_405 = ");" + NL + "\t\t\t}" + NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_406 = "())) {" + NL + "\t\t\t\tDate ";
  protected final String TEXT_407 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_408 = "()));" + NL + "\t\t\t\tcondition.addLe(";
  protected final String TEXT_409 = ".";
  protected final String TEXT_410 = ".getFieldName(), ";
  protected final String TEXT_411 = ");" + NL + "\t\t\t}";
  protected final String TEXT_412 = NL + "\t\t\tcondition.";
  protected final String TEXT_413 = ";//";
  protected final String TEXT_414 = " ";
  protected final String TEXT_415 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.getParentId())) {" + NL + "\t\t\t\t";
  protected final String TEXT_416 = " model = get(rto.getParentId());" + NL + "\t\t\t\tif (null != model) {" + NL + "\t\t\t\t\tcondition.addStartsLike(";
  protected final String TEXT_417 = ".layerCode.getFieldName(), model.getLayerCode());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 保存\"";
  protected final String TEXT_418 = "(";
  protected final String TEXT_419 = ")\"关联的\"";
  protected final String TEXT_420 = "(";
  protected final String TEXT_421 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_422 = " saveBy";
  protected final String TEXT_423 = "(String ";
  protected final String TEXT_424 = ",";
  protected final String TEXT_425 = " rto) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_426 = ", \"未指定";
  protected final String TEXT_427 = "!\");" + NL + "\t\trto.";
  protected final String TEXT_428 = "(";
  protected final String TEXT_429 = ");" + NL + "\t\treturn save(rto);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新\"";
  protected final String TEXT_430 = "(";
  protected final String TEXT_431 = ")\"关联的\"";
  protected final String TEXT_432 = "(";
  protected final String TEXT_433 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_434 = " updateBy";
  protected final String TEXT_435 = "(String ";
  protected final String TEXT_436 = ",";
  protected final String TEXT_437 = " rto) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_438 = ", \"未指定";
  protected final String TEXT_439 = "!\");" + NL + "\t\trto.";
  protected final String TEXT_440 = "(";
  protected final String TEXT_441 = ");" + NL + "\t\treturn update(rto);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 删除所有\"";
  protected final String TEXT_442 = "(";
  protected final String TEXT_443 = ")\"关联的\"";
  protected final String TEXT_444 = "(";
  protected final String TEXT_445 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic int deleteAllBy";
  protected final String TEXT_446 = "(String ";
  protected final String TEXT_447 = ") {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_448 = ", \"未指定";
  protected final String TEXT_449 = "!\");" + NL + "\t\tfinal String hql = \"delete from \" + entityClass.getName() + \" m where m.";
  protected final String TEXT_450 = "=?\";" + NL + "\t\treturn hibernateDao.executeUpdate(hql, ";
  protected final String TEXT_451 = ");" + NL + "\t}" + NL + "\t" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<";
  protected final String TEXT_452 = "> getAllForTreeviewBy";
  protected final String TEXT_453 = "(String ";
  protected final String TEXT_454 = ") {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_455 = "(m.id,m.name,m.parent.id) from ";
  protected final String TEXT_456 = " m where m.";
  protected final String TEXT_457 = "=?\";" + NL + "\t\treturn hibernateDao.find(hql, ";
  protected final String TEXT_458 = ");" + NL + "\t}" + NL;
  protected final String TEXT_459 = "\t" + NL + "\t" + NL + "}";
  protected final String TEXT_460 = "/*" + NL + " * Copyright (c) 2009-2013 jeefuse.com, Licensed under GPL (the \"License\")" + NL + " * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms." + NL + " * email:yonclv@gmail.com" + NL + " */" + NL + "package ";
  protected final String TEXT_461 = ";";
  protected final String TEXT_462 = NL;
  protected final String TEXT_463 = NL + NL + "/**" + NL + " * ";
  protected final String TEXT_464 = " Entity CRUD service impl." + NL + " *" + NL + " * @author ";
  protected final String TEXT_465 = NL + " * @generated" + NL + " */" + NL + "@";
  protected final String TEXT_466 = "(value=\"";
  protected final String TEXT_467 = "\")" + NL + "public class ";
  protected final String TEXT_468 = " extends ";
  protected final String TEXT_469 = "<";
  protected final String TEXT_470 = ", ";
  protected final String TEXT_471 = "> implements ";
  protected final String TEXT_472 = "{";
  protected final String TEXT_473 = NL + "\tpublic final static String SERVICE_ID = \"";
  protected final String TEXT_474 = "\";" + NL + "\tprivate final static int LAYER_MAX_DEEP = TreeLayerCodeUtil.defaultLayerLen;" + NL + "\tprivate static final OrderSet DEFAULT_ORDERSET = OrderSet.create(";
  protected final String TEXT_475 = ".";
  protected final String TEXT_476 = ".getFieldName(), OrderMode.";
  protected final String TEXT_477 = ");" + NL + "" + NL + "\t/** " + NL + "\t * ";
  protected final String TEXT_478 = " constructor with set ";
  protected final String TEXT_479 = " entity Class." + NL + "\t * @generated " + NL + "\t */" + NL + "\t@Autowired" + NL + "\tpublic ";
  protected final String TEXT_480 = "(";
  protected final String TEXT_481 = " ";
  protected final String TEXT_482 = ") {" + NL + "\t\tsuper(";
  protected final String TEXT_483 = ", ";
  protected final String TEXT_484 = ".class);" + NL + "\t}";
  protected final String TEXT_485 = "\t";
  protected final String TEXT_486 = NL + NL + "\t/** @generated*/" + NL + "\t@Transactional" + NL + "\t@Override" + NL + "\tpublic void save(";
  protected final String TEXT_487 = " entity) {" + NL + "\t\tif (StringUtils.isNotBlank(entity.getParentId())) {" + NL + "\t\t\t";
  protected final String TEXT_488 = " parent = get(entity.getParentId());" + NL + "\t\t\tif (null == parent)" + NL + "\t\t\t\tthrow new DataNoExistException(\"上级节点不存在!\");" + NL + "\t\t\tif (getDeep(parent.getId()) >= LAYER_MAX_DEEP - 1)" + NL + "\t\t\t\tthrow new InvalidDataException(\"最大不能超过\" + LAYER_MAX_DEEP + \"级层次!\");" + NL + "\t\t\tentity.setParent(parent);" + NL + "\t\t}" + NL + "\t\thibernateDao.save(entity);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 保存对象." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_489 = " save(";
  protected final String TEXT_490 = " rto) {" + NL + "\t\t";
  protected final String TEXT_491 = " newModel = rto.getNewModel();" + NL + "\t\tsave(newModel);" + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新对象." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_492 = " update(";
  protected final String TEXT_493 = " rto) {" + NL + "\t\t";
  protected final String TEXT_494 = " oldModel = get(rto.getId());" + NL + "\t\tAppAssert.notNull(oldModel, \"您更新的对象不存在!\");" + NL + "\t\t";
  protected final String TEXT_495 = " newModel = rto.getModifiedModel(oldModel);" + NL + "\t\tif (StringUtils.isNotBlank(newModel.getParentId())) {" + NL + "\t\t\t";
  protected final String TEXT_496 = " parent = get(newModel.getParentId());" + NL + "\t\t\tif (null == parent)" + NL + "\t\t\t\tthrow new DataNoExistException(\"上级节点不存在!\");" + NL + "\t\t\tif (getDeep(parent.getId()) >= LAYER_MAX_DEEP - 1)" + NL + "\t\t\t\tthrow new InvalidDataException(\"最大不能超过\" + LAYER_MAX_DEEP + \"级层次!\");" + NL + "\t\t}" + NL + "\t\t// hibernateDao.update(newModel);//in session hibernate will auto update it." + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\t@Override" + NL + "\tpublic List<";
  protected final String TEXT_497 = "> getAll(Order... orders) {" + NL + "\t\treturn super.getAll(buildOrderSet(orders).toOrderArray());" + NL + "\t}" + NL;
  protected final String TEXT_498 = NL + "\t/** @generated */" + NL + "\tprivate OrderSet buildOrderSet(Order... orders) {" + NL + "\t\tOrderSet orderSet = null;" + NL + "\t\tif (null == orders) {" + NL + "\t\t\torderSet = DEFAULT_ORDERSET;" + NL + "\t\t} else {" + NL + "\t\t\torderSet = OrderSet.create(orders);" + NL + "\t\t}" + NL + "\t\treturn orderSet;" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\tpublic List<";
  protected final String TEXT_499 = "> findByProperty(";
  protected final String TEXT_500 = " ";
  protected final String TEXT_501 = ", Object value){" + NL + "\t\treturn findByProperty(";
  protected final String TEXT_502 = ".getFieldName(), value);" + NL + "\t}" + NL + "" + NL + "\t/** @generated*/" + NL + "\tpublic boolean isPropertyUnique(";
  protected final String TEXT_503 = " ";
  protected final String TEXT_504 = ", Object newValue){" + NL + "\t\tObject m = findUniqueByProperty(";
  protected final String TEXT_505 = ".getFieldName(), newValue);" + NL + "\t\treturn (m == null);" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\tpublic Page<";
  protected final String TEXT_506 = "> find(Page<";
  protected final String TEXT_507 = "> page, ";
  protected final String TEXT_508 = " rto, Order[] orders) {" + NL + "\t\tCondition condition = Condition.and();";
  protected final String TEXT_509 = NL + "\t\tif (null != rto) {";
  protected final String TEXT_510 = NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_511 = "())) {//";
  protected final String TEXT_512 = " ";
  protected final String TEXT_513 = "\t\t";
  protected final String TEXT_514 = "\t";
  protected final String TEXT_515 = "\t" + NL + "\t\t\tDate ";
  protected final String TEXT_516 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_517 = "()));" + NL + "\t\t\tcondition.addGe(";
  protected final String TEXT_518 = ".";
  protected final String TEXT_519 = ".getFieldName(), ";
  protected final String TEXT_520 = ");" + NL + "\t\t}" + NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_521 = "())) {" + NL + "\t\t\tDate ";
  protected final String TEXT_522 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_523 = "()));" + NL + "\t\t\tcondition.addLe(";
  protected final String TEXT_524 = ".";
  protected final String TEXT_525 = ".getFieldName(), ";
  protected final String TEXT_526 = ");" + NL + "\t\t}";
  protected final String TEXT_527 = NL + "\t\tcondition.";
  protected final String TEXT_528 = ";//";
  protected final String TEXT_529 = " ";
  protected final String TEXT_530 = NL + "\t\t}" + NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_531 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_532 = NL + "\t}" + NL + "\t";
  protected final String TEXT_533 = NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\tpublic ResultMsg<";
  protected final String TEXT_534 = "> ";
  protected final String TEXT_535 = "(List<";
  protected final String TEXT_536 = "> importList)throws Exception {" + NL + "\t\tResultMsg<";
  protected final String TEXT_537 = "> result = new ResultMsg<";
  protected final String TEXT_538 = ">();" + NL + "\t\tif(null==importList||importList.isEmpty()){" + NL + "\t\t\tresult.setMessage(\"无记录导入\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\tList<";
  protected final String TEXT_539 = "> addList = new ArrayList<";
  protected final String TEXT_540 = ">();" + NL + "\t\tList<";
  protected final String TEXT_541 = "> updateList = new ArrayList<";
  protected final String TEXT_542 = ">();" + NL + "\t\tfor (";
  protected final String TEXT_543 = " ";
  protected final String TEXT_544 = " : importList) {" + NL + "\t\t\tif (StringUtils.isBlank(";
  protected final String TEXT_545 = ".getId())) {" + NL + "\t\t\t\t";
  protected final String TEXT_546 = " .setId(null);" + NL + "\t\t\t\taddList.add(";
  protected final String TEXT_547 = " );" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_548 = " oldModel = get(";
  protected final String TEXT_549 = ".getId());" + NL + "\t\t\t\tif (null == oldModel) {" + NL + "\t\t\t\t\taddList.add(";
  protected final String TEXT_550 = ");" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tPropertyUtils.copyProperties(oldModel, ";
  protected final String TEXT_551 = ");" + NL + "\t\t\t\t\tupdateList.add(oldModel);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tStringBuilder msgSb = new StringBuilder(\"\");" + NL + "\t\tint addCount = 0;" + NL + "\t\tif (!addList.isEmpty()) {" + NL + "\t\t\thibernateDao.save(addList);" + NL + "\t\t\taddCount = addList.size();" + NL + "\t\t}" + NL + "\t\tint updateCount = 0;" + NL + "\t\tif (!updateList.isEmpty()) {" + NL + "\t\t\thibernateDao.update(updateList);" + NL + "\t\t\tupdateCount = updateList.size();" + NL + "\t\t}" + NL + "\t\tmsgSb.append(\"共成功导入\" + (addCount+updateCount) + \"项记录!\");" + NL + "\t\tif(addCount!=0){" + NL + "\t\t\tmsgSb.append(\" 新增:\"+addCount+\"项.\");" + NL + "\t\t}" + NL + "\t\tif(updateCount!=0){" + NL + "\t\t\tmsgSb.append(\" 更新:\"+updateCount+\"项.\");" + NL + "\t\t}" + NL + "\t\tresult.setMessage(msgSb.toString());" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/*****************************************************************" + NL + "\t * 树形操作" + NL + "\t/*****************************************************************/" + NL + "" + NL + "\t/**" + NL + "\t * 根据层次代码获取所有后代对象," + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_552 = "> findDescendant(Page<";
  protected final String TEXT_553 = "> page, ";
  protected final String TEXT_554 = " rto, Order[] orders) {" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tif (null != rto) {";
  protected final String TEXT_555 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_556 = "())) {//";
  protected final String TEXT_557 = " ";
  protected final String TEXT_558 = "\t\t";
  protected final String TEXT_559 = "\t";
  protected final String TEXT_560 = "\t" + NL + "\t\t\t\tDate ";
  protected final String TEXT_561 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_562 = "()));" + NL + "\t\t\t\tcondition.addGe(";
  protected final String TEXT_563 = ".";
  protected final String TEXT_564 = ".getFieldName(), ";
  protected final String TEXT_565 = ");" + NL + "\t\t\t}" + NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_566 = "())) {" + NL + "\t\t\t\tDate ";
  protected final String TEXT_567 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_568 = "()));" + NL + "\t\t\t\tcondition.addLe(";
  protected final String TEXT_569 = ".";
  protected final String TEXT_570 = ".getFieldName(), ";
  protected final String TEXT_571 = ");" + NL + "\t\t\t}";
  protected final String TEXT_572 = NL + "\t\t\tcondition.";
  protected final String TEXT_573 = ";//";
  protected final String TEXT_574 = " ";
  protected final String TEXT_575 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.getParentId())) {" + NL + "\t\t\t\tSet<String> idSet = getDescendantIds(rto.getParentId());" + NL + "\t\t\t\tidSet.add(rto.getParentId());" + NL + "\t\t\t\tcondition.addin(";
  protected final String TEXT_576 = ".";
  protected final String TEXT_577 = ".getFieldName(), idSet);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 设置";
  protected final String TEXT_578 = "的子节点的父节点为";
  protected final String TEXT_579 = "的父节点." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tprivate void updateChildrenParentNode(";
  protected final String TEXT_580 = " ";
  protected final String TEXT_581 = ") {" + NL + "\t\tList<";
  protected final String TEXT_582 = "> updateList = getChildren(";
  protected final String TEXT_583 = ".getId());" + NL + "\t\tif (null != updateList && !updateList.isEmpty()) {" + NL + "\t\t\tfor (";
  protected final String TEXT_584 = " item : updateList) {" + NL + "\t\t\t\titem.setParent(";
  protected final String TEXT_585 = ".getParent());" + NL + "\t\t\t}" + NL + "\t\t\t// hibernateDao.update(updateList);in session don't need update" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 获取所有后代对象.没有后代对象则返回空" + NL + "\t * " + NL + "\t * @param parentId" + NL + "\t *            父节点,不能为空" + NL + "\t * @generated" + NL + "\t */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<";
  protected final String TEXT_586 = "> getDescendant(String parentId) {" + NL + "\t\tAssert.hasText(parentId);" + NL + "\t\tSet<String> descendantIdsList = getDescendantIds(parentId);" + NL + "\t\tif(null!=descendantIdsList&&!descendantIdsList.isEmpty()){" + NL + "\t\t\tfinal String hql=\"from ";
  protected final String TEXT_587 = " m where m.";
  protected final String TEXT_588 = " in(:idList)\";" + NL + "\t\t\treturn hibernateDao.createQuery(hql).setParameterList(\"idList\", descendantIdsList).list();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 获取所有子对象.没有则返回空" + NL + "\t * " + NL + "\t * @param parentId" + NL + "\t *            父节点,不能为空" + NL + "\t * @generated" + NL + "\t */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<";
  protected final String TEXT_589 = "> getChildren(String parentId) {" + NL + "\t\tAssert.hasText(parentId);" + NL + "\t\tfinal String hql = \"from ";
  protected final String TEXT_590 = " m where m.parent.id=?\";" + NL + "\t\treturn hibernateDao.find(hql, parentId);" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated */" + NL + "\tpublic boolean hasChildren(String[] ids) {" + NL + "\t\tfor (String id : ids) {" + NL + "\t\t\tCondition condition = Condition.and();" + NL + "\t\t\tcondition.addEqIfNotBlank(";
  protected final String TEXT_591 = ".parentId.getFieldName(), id);" + NL + "\t\t\tlong count = hibernateDao.countFind(entityClass, condition);" + NL + "\t\t\tif (count > 0)" + NL + "\t\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\t@Override" + NL + "\tpublic int delete(String... ids) {" + NL + "\t\tint count = 0;" + NL + "\t\tfor (String id : ids) {" + NL + "\t\t\t";
  protected final String TEXT_592 = " model = get(id);" + NL + "\t\t\tupdateChildrenParentNode(model);" + NL + "\t\t\thibernateDao.delete(model);" + NL + "\t\t\tcount++;" + NL + "\t\t}" + NL + "\t\treturn count;" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\tpublic int deleteDescendant(String[] ids) {" + NL + "\t\tSet<String> idSet = new HashSet<String>();" + NL + "\t\tfor (String id : ids) {" + NL + "\t\t\tidSet.add(id);" + NL + "\t\t\tSet<String> descendantIdsList = getDescendantIds(id);" + NL + "\t\t\tidSet.addAll(descendantIdsList);" + NL + "\t\t}" + NL + "\t\tfinal String hql = \"delete from ";
  protected final String TEXT_593 = " m where  m.";
  protected final String TEXT_594 = " in(:idList)\";" + NL + "\t\tint count =  hibernateDao.createQuery(hql).setParameterList(\"idList\", idSet).executeUpdate();" + NL + "\t\treturn count;" + NL + "\t}" + NL + "" + NL + "\t/** @generated */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic Set<String> getDescendantIds(String parentId) {" + NL + "\t\tSet<String> result = new HashSet<String>();" + NL + "\t\tif(StringUtils.isBlank(parentId)){" + NL + "\t\t\tfinal String hql = \"select m.id from ";
  protected final String TEXT_595 = " m where m.parent.id is null\";" + NL + "\t\t\tList<String> idList = hibernateDao.find(hql.toString());" + NL + "\t\t\tif (null != idList && !idList.isEmpty()) {" + NL + "\t\t\t\tresult.addAll(idList);" + NL + "\t\t\t\tgetDescendantIds(idList, result);" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tfinal String hql = \"select m.id from ";
  protected final String TEXT_596 = " m where m.parent.id = ?\";" + NL + "\t\t\tList<String> idList = hibernateDao.find(hql.toString(), parentId);" + NL + "\t\t\tif (null != idList && !idList.isEmpty()) {" + NL + "\t\t\t\tresult.addAll(idList);" + NL + "\t\t\t\tgetDescendantIds(idList, result);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/** @generated */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tprivate void getDescendantIds(List<String> idList, Set<String> result) {" + NL + "\t\tif (null != idList && !idList.isEmpty()) {" + NL + "\t\t\tfinal String hql=\"select m.id from ";
  protected final String TEXT_597 = " m where m.parent.id in(:idList)\";" + NL + "\t\t\tList<String> ids=hibernateDao.createQuery(hql).setParameterList(\"idList\", idList).list();" + NL + "\t\t\tif (null != ids && !ids.isEmpty()) {" + NL + "\t\t\t\tresult.addAll(ids);" + NL + "\t\t\t\tgetDescendantIds(ids, result);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/** @generated */" + NL + "\tpublic Set<String> getAncestorIds(String id) {" + NL + "\t\tAssert.hasText(id, \"ID不能为空\");" + NL + "\t\tSet<String> result = new HashSet<String>();" + NL + "\t\tfinal String hql = \"select m.parent.id from ";
  protected final String TEXT_598 = " m where m.id=?\";" + NL + "\t\tString parentId = (String) hibernateDao.findUnique(hql, id);" + NL + "\t\tif (StringUtils.isNotBlank(parentId)) {" + NL + "\t\t\tresult.add(parentId);" + NL + "\t\t\tgetAncestorIds(parentId, result);" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/** @generated */" + NL + "\tprivate void getAncestorIds(String id, Set<String> result) {" + NL + "\t\tAssert.hasText(id, \"ID不能为空\");" + NL + "\t\tfinal String hql = \"select m.parent.id from ";
  protected final String TEXT_599 = " m where m.id=?\";" + NL + "\t\tString parentId = (String) hibernateDao.findUnique(hql, id);" + NL + "\t\tif (StringUtils.isNotBlank(parentId)) {" + NL + "\t\t\tresult.add(parentId);" + NL + "\t\t\tgetAncestorIds(parentId, result);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 获取层次深度,id不能为空." + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic int getDeep(String id) {" + NL + "\t\tAssert.hasText(id, \"ID不能为空\");" + NL + "\t\tSet<String> ancestorIdList = getAncestorIds(id);" + NL + "\t\treturn ancestorIdList.size();" + NL + "\t}" + NL;
  protected final String TEXT_600 = "\t";
  protected final String TEXT_601 = "\t";
  protected final String TEXT_602 = "\t";
  protected final String TEXT_603 = "\t\t\t";
  protected final String TEXT_604 = "\t";
  protected final String TEXT_605 = "\t\t\t";
  protected final String TEXT_606 = "\t\t\t";
  protected final String TEXT_607 = NL + "\t/** @generated */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<TreeViewItem> getAllForTreeview(OrderSet orderSet) {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_608 = "(m.";
  protected final String TEXT_609 = ",m.";
  protected final String TEXT_610 = ",m.parent.";
  protected final String TEXT_611 = ") from ";
  protected final String TEXT_612 = " m\";" + NL + "\t\tStringBuilder selectHqlsb = new StringBuilder(hql);" + NL + "\t\tif (null != orderSet) {" + NL + "\t\t\tselectHqlsb.append(orderSet.toOrderBySql());" + NL + "\t\t} else {" + NL + "\t\t\tselectHqlsb.append(buildOrderSet().toOrderBySql());" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.createQuery(selectHqlsb.toString()).list();" + NL + "\t}" + NL + "\t" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<TreeViewItem> getChildrenForTreeview(String parentId) {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_613 = "(m.";
  protected final String TEXT_614 = ",m.";
  protected final String TEXT_615 = ",m.parent.";
  protected final String TEXT_616 = ") from ";
  protected final String TEXT_617 = " m\";" + NL + "\t\tStringBuilder hqlSb = new StringBuilder(hql);" + NL + "\t\tif (StringUtils.isBlank(parentId)) {" + NL + "\t\t\thqlSb.append(\" where m.parent is null\");" + NL + "\t\t\thqlSb.append(buildOrderSet().toOrderBySql());" + NL + "\t\t\treturn hibernateDao.find(hqlSb.toString());" + NL + "\t\t} else {" + NL + "\t\t\thqlSb.append(\" where m.parent = ?\");" + NL + "\t\t\thqlSb.append(buildOrderSet().toOrderBySql());" + NL + "\t\t\treturn hibernateDao.find(hqlSb.toString(), parentId);" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_618 = "\t\t\t";
  protected final String TEXT_619 = "\t\t\t";
  protected final String TEXT_620 = "\t";
  protected final String TEXT_621 = "\t";
  protected final String TEXT_622 = "\t";
  protected final String TEXT_623 = "\t";
  protected final String TEXT_624 = "\t" + NL + "\t/**" + NL + "\t * 获取所有";
  protected final String TEXT_625 = "对象用于构造keyLabel,只获取key,label属性." + NL + "\t * @generated" + NL + "\t */" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<KeyLabel> ";
  protected final String TEXT_626 = "(){" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_627 = "(m.";
  protected final String TEXT_628 = ",m.";
  protected final String TEXT_629 = ") from ";
  protected final String TEXT_630 = " m\";" + NL + "\t\treturn hibernateDao.createQuery(hql).list();" + NL + "\t}";
  protected final String TEXT_631 = "\t";
  protected final String TEXT_632 = NL + "\t" + NL + "\t/*****************************************************************" + NL + "\t * manage by ";
  protected final String TEXT_633 = "(";
  protected final String TEXT_634 = ")" + NL + "\t *****************************************************************/" + NL + "" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_635 = "(";
  protected final String TEXT_636 = ")\"关联的\"";
  protected final String TEXT_637 = "(";
  protected final String TEXT_638 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_639 = "> findBy";
  protected final String TEXT_640 = "(String ";
  protected final String TEXT_641 = ",Page<";
  protected final String TEXT_642 = "> page, ";
  protected final String TEXT_643 = " rto, Order[] orders) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_644 = ", \"未指定";
  protected final String TEXT_645 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_646 = "\", ";
  protected final String TEXT_647 = ");";
  protected final String TEXT_648 = NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_649 = "())) {//";
  protected final String TEXT_650 = " ";
  protected final String TEXT_651 = "\t\t";
  protected final String TEXT_652 = "\t";
  protected final String TEXT_653 = "\t" + NL + "\t\t\tDate ";
  protected final String TEXT_654 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_655 = "()));" + NL + "\t\t\tcondition.addGe(";
  protected final String TEXT_656 = ".";
  protected final String TEXT_657 = ".getFieldName(), ";
  protected final String TEXT_658 = ");" + NL + "\t\t}" + NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_659 = "())) {" + NL + "\t\t\tDate ";
  protected final String TEXT_660 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_661 = "()));" + NL + "\t\t\tcondition.addLe(";
  protected final String TEXT_662 = ".";
  protected final String TEXT_663 = ".getFieldName(), ";
  protected final String TEXT_664 = ");" + NL + "\t\t}";
  protected final String TEXT_665 = NL + "\t\tcondition.";
  protected final String TEXT_666 = ";//";
  protected final String TEXT_667 = " ";
  protected final String TEXT_668 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_669 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_670 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_671 = "(";
  protected final String TEXT_672 = ")\"关联的\"";
  protected final String TEXT_673 = "(";
  protected final String TEXT_674 = ")\"." + NL + "\t * " + NL + "\t */" + NL + "\tpublic List<";
  protected final String TEXT_675 = "> findBy";
  protected final String TEXT_676 = "(String ";
  protected final String TEXT_677 = ") {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_678 = ", \"未指定";
  protected final String TEXT_679 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_680 = "\", ";
  protected final String TEXT_681 = ");" + NL + "\t\treturn hibernateDao.find(entityClass, condition);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_682 = "(";
  protected final String TEXT_683 = ")\"关联的\"";
  protected final String TEXT_684 = "(";
  protected final String TEXT_685 = ")\",根据层次代码获取所有后代对象," + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_686 = "> findDescendantBy";
  protected final String TEXT_687 = "(String ";
  protected final String TEXT_688 = ", Page<";
  protected final String TEXT_689 = "> page,";
  protected final String TEXT_690 = " rto, Order[] orders) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_691 = ", \"未指定";
  protected final String TEXT_692 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_693 = "\", ";
  protected final String TEXT_694 = ");" + NL + "\t\tif (null != rto) {";
  protected final String TEXT_695 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_696 = "())) {//";
  protected final String TEXT_697 = " ";
  protected final String TEXT_698 = "\t\t";
  protected final String TEXT_699 = "\t";
  protected final String TEXT_700 = "\t" + NL + "\t\t\t\tDate ";
  protected final String TEXT_701 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_702 = "()));" + NL + "\t\t\t\tcondition.addGe(";
  protected final String TEXT_703 = ".";
  protected final String TEXT_704 = ".getFieldName(), ";
  protected final String TEXT_705 = ");" + NL + "\t\t\t}" + NL + "\t\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_706 = "())) {" + NL + "\t\t\t\tDate ";
  protected final String TEXT_707 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_708 = "()));" + NL + "\t\t\t\tcondition.addLe(";
  protected final String TEXT_709 = ".";
  protected final String TEXT_710 = ".getFieldName(), ";
  protected final String TEXT_711 = ");" + NL + "\t\t\t}";
  protected final String TEXT_712 = NL + "\t\t\tcondition.";
  protected final String TEXT_713 = ";//";
  protected final String TEXT_714 = " ";
  protected final String TEXT_715 = NL + "\t\t\tif (StringUtils.isNotBlank(rto.getParentId())) {" + NL + "\t\t\t\tSet<String> idSet = getDescendantIds(rto.getParentId());" + NL + "\t\t\t\tcondition.addin(";
  protected final String TEXT_716 = ".";
  protected final String TEXT_717 = ".getFieldName(), idSet);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 保存\"";
  protected final String TEXT_718 = "(";
  protected final String TEXT_719 = ")\"关联的\"";
  protected final String TEXT_720 = "(";
  protected final String TEXT_721 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_722 = " saveBy";
  protected final String TEXT_723 = "(String ";
  protected final String TEXT_724 = ",";
  protected final String TEXT_725 = " rto) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_726 = ", \"未指定";
  protected final String TEXT_727 = "!\");" + NL + "\t\t";
  protected final String TEXT_728 = " newModel=rto.getNewModel();" + NL + "\t\tnewModel.";
  protected final String TEXT_729 = "(";
  protected final String TEXT_730 = ");" + NL + "\t\tsave(newModel);" + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新\"";
  protected final String TEXT_731 = "(";
  protected final String TEXT_732 = ")\"关联的\"";
  protected final String TEXT_733 = "(";
  protected final String TEXT_734 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_735 = " updateBy";
  protected final String TEXT_736 = "(String ";
  protected final String TEXT_737 = ",";
  protected final String TEXT_738 = " rto) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_739 = ", \"未指定";
  protected final String TEXT_740 = "!\");" + NL + "\t\t";
  protected final String TEXT_741 = " oldModel = get(rto.getId());" + NL + "\t\tAppAssert.notNull(oldModel, \"您更新的记录不存在!\");" + NL + "\t\t";
  protected final String TEXT_742 = " newModel = rto.getModifiedModel(oldModel);" + NL + "\t\tnewModel.";
  protected final String TEXT_743 = "(";
  protected final String TEXT_744 = ");" + NL + "\t\tif (StringUtils.isNotBlank(newModel.getParentId())) {" + NL + "\t\t\t";
  protected final String TEXT_745 = " parent = get(newModel.getParentId());" + NL + "\t\t\tif (null == parent)" + NL + "\t\t\t\tthrow new DataNoExistException(\"上级节点不存在!\");" + NL + "\t\t\tif (getDeep(parent.getId()) >= LAYER_MAX_DEEP - 1)" + NL + "\t\t\t\tthrow new InvalidDataException(\"最大不能超过\" + LAYER_MAX_DEEP + \"级层次!\");" + NL + "\t\t}" + NL + "\t\t// hibernateDao.update(newModel);//in session hibernate will auto update it." + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 删除所有\"";
  protected final String TEXT_746 = "(";
  protected final String TEXT_747 = ")\"关联的\"";
  protected final String TEXT_748 = "(";
  protected final String TEXT_749 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic int deleteAllBy";
  protected final String TEXT_750 = "(String ";
  protected final String TEXT_751 = ") {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_752 = ", \"未指定";
  protected final String TEXT_753 = "!\");" + NL + "\t\tfinal String hql = \"delete from \" + entityClass.getName() + \" m where m.";
  protected final String TEXT_754 = "=?\";" + NL + "\t\treturn hibernateDao.executeUpdate(hql, ";
  protected final String TEXT_755 = ");" + NL + "\t}" + NL + "\t" + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<";
  protected final String TEXT_756 = "> getAllForTreeviewBy";
  protected final String TEXT_757 = "(String ";
  protected final String TEXT_758 = ") {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_759 = "(m.id,m.name,m.parent.id) from ";
  protected final String TEXT_760 = " m where m.";
  protected final String TEXT_761 = "=?\";" + NL + "\t\treturn hibernateDao.find(hql, ";
  protected final String TEXT_762 = ");" + NL + "\t}" + NL + "\t";
  protected final String TEXT_763 = "\t" + NL + "\t" + NL + "}";
  protected final String TEXT_764 = "/*" + NL + " * Copyright (c) 2009-2013 jeefuse.com, Licensed under GPL (the \"License\")" + NL + " * PROPRIETARY/CONFIDENTIAL. Use is subject to license terms." + NL + " * email:yonclv@gmail.com" + NL + " */" + NL + "package ";
  protected final String TEXT_765 = ";";
  protected final String TEXT_766 = NL;
  protected final String TEXT_767 = NL + NL + "/**" + NL + " * ";
  protected final String TEXT_768 = " Entity CRUD service impl." + NL + " *" + NL + " * @author ";
  protected final String TEXT_769 = NL + " * @generated" + NL + " */" + NL + "@";
  protected final String TEXT_770 = "(value=\"";
  protected final String TEXT_771 = "\")" + NL + "public class ";
  protected final String TEXT_772 = " extends ";
  protected final String TEXT_773 = "<";
  protected final String TEXT_774 = ", ";
  protected final String TEXT_775 = "> implements ";
  protected final String TEXT_776 = "{" + NL + "\tpublic final static String SERVICE_ID = \"";
  protected final String TEXT_777 = "\";" + NL + "\t" + NL + "\t/** " + NL + "\t * ";
  protected final String TEXT_778 = " constructor with set ";
  protected final String TEXT_779 = " entity Class." + NL + "\t * @generated " + NL + "\t */" + NL + "\t@Autowired" + NL + "\tpublic ";
  protected final String TEXT_780 = "(";
  protected final String TEXT_781 = " ";
  protected final String TEXT_782 = ") {" + NL + "\t\tsuper(";
  protected final String TEXT_783 = ", ";
  protected final String TEXT_784 = ".class);" + NL + "\t}" + NL;
  protected final String TEXT_785 = "\t" + NL + "\t/**" + NL + "\t * 保存对象." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_786 = " save(";
  protected final String TEXT_787 = " rto) throws ValidateViolationException {" + NL + "\t\t";
  protected final String TEXT_788 = " newModel = rto.getNewModel();" + NL + "\t\thibernateDao.save(newModel);" + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新对象." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_789 = " update(";
  protected final String TEXT_790 = " rto) throws ValidateViolationException {";
  protected final String TEXT_791 = NL + "\t\tAppAssert.isNotblank(rto.getId(), \"ID不能为空!\");";
  protected final String TEXT_792 = "\t\t" + NL + "\t\t//for assign id" + NL + "\t\tAppAssert.isNotblank(rto.getOldId(), \"更新ID不能为空!\");" + NL + "\t\tif(!rto.getId().equals(rto.getOldId()))" + NL + "\t\t\tthrow new InvalidDataException(\"ID不能更改!\");";
  protected final String TEXT_793 = NL + "\t\t";
  protected final String TEXT_794 = " oldModel = get(rto.getId());" + NL + "\t\tAppAssert.notNull(oldModel, \"您更新的对象不存在!\");" + NL + "\t\t";
  protected final String TEXT_795 = " newModel = rto.getModifiedModel(oldModel);" + NL + "\t\t// hibernateDao.update(newModel);//in session will auto update it." + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\tpublic List<";
  protected final String TEXT_796 = "> findByProperty(";
  protected final String TEXT_797 = " ";
  protected final String TEXT_798 = ", Object value){" + NL + "\t\treturn findByProperty(";
  protected final String TEXT_799 = ".getFieldName(), value);" + NL + "\t}" + NL + "" + NL + "\t/** @generated*/" + NL + "\tpublic boolean isPropertyUnique(";
  protected final String TEXT_800 = " ";
  protected final String TEXT_801 = ", Object newValue){" + NL + "\t\tObject m = findUniqueByProperty(";
  protected final String TEXT_802 = ".getFieldName(), newValue);" + NL + "\t\treturn (m == null);" + NL + "\t}" + NL + "\t" + NL + "\t/** @generated*/" + NL + "\tpublic Page<";
  protected final String TEXT_803 = "> find(Page<";
  protected final String TEXT_804 = "> page, ";
  protected final String TEXT_805 = " rto, Order[] orders) {" + NL + "\t\tCondition condition = Condition.and();";
  protected final String TEXT_806 = NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_807 = "())) {//";
  protected final String TEXT_808 = " ";
  protected final String TEXT_809 = "\t\t";
  protected final String TEXT_810 = "\t";
  protected final String TEXT_811 = "\t" + NL + "\t\t\tDate ";
  protected final String TEXT_812 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_813 = "()));" + NL + "\t\t\tcondition.addGe(";
  protected final String TEXT_814 = ".";
  protected final String TEXT_815 = ".getFieldName(), ";
  protected final String TEXT_816 = ");" + NL + "\t\t}" + NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_817 = "())) {" + NL + "\t\t\tDate ";
  protected final String TEXT_818 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_819 = "()));" + NL + "\t\t\tcondition.addLe(";
  protected final String TEXT_820 = ".";
  protected final String TEXT_821 = ".getFieldName(), ";
  protected final String TEXT_822 = ");" + NL + "\t\t}";
  protected final String TEXT_823 = NL + "\t\tcondition.";
  protected final String TEXT_824 = ";//";
  protected final String TEXT_825 = " ";
  protected final String TEXT_826 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_827 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_828 = NL + "\t}" + NL + "\t";
  protected final String TEXT_829 = NL + "\t/** @generated */" + NL + "\t@Transactional" + NL + "\tpublic ResultMsg<";
  protected final String TEXT_830 = "> ";
  protected final String TEXT_831 = "(List<";
  protected final String TEXT_832 = "> importList) throws Exception{" + NL + "\t\tResultMsg<";
  protected final String TEXT_833 = "> result = new ResultMsg<";
  protected final String TEXT_834 = ">();" + NL + "\t\tif(null==importList||importList.isEmpty()){" + NL + "\t\t\tresult.setMessage(\"无记录导入\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\tList<";
  protected final String TEXT_835 = "> addList = new ArrayList<";
  protected final String TEXT_836 = ">();" + NL + "\t\tList<";
  protected final String TEXT_837 = "> updateList = new ArrayList<";
  protected final String TEXT_838 = ">();" + NL + "\t\tfor (";
  protected final String TEXT_839 = " ";
  protected final String TEXT_840 = " : importList) {" + NL + "\t\t\tif (StringUtils.isBlank(";
  protected final String TEXT_841 = ".getId())) {" + NL + "\t\t\t\t";
  protected final String TEXT_842 = " .setId(null);" + NL + "\t\t\t\taddList.add(";
  protected final String TEXT_843 = " );" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_844 = " oldModel = get(";
  protected final String TEXT_845 = ".getId());" + NL + "\t\t\t\tif (null == oldModel) {" + NL + "\t\t\t\t\taddList.add(";
  protected final String TEXT_846 = ");" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tPropertyUtils.copyProperties(oldModel, ";
  protected final String TEXT_847 = ");" + NL + "\t\t\t\t\tupdateList.add(oldModel);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tStringBuilder msgSb = new StringBuilder(\"\");" + NL + "\t\tint addCount = 0;" + NL + "\t\tif (!addList.isEmpty()) {" + NL + "\t\t\thibernateDao.save(addList);" + NL + "\t\t\taddCount = addList.size();" + NL + "\t\t}" + NL + "\t\tint updateCount = 0;" + NL + "\t\tif (!updateList.isEmpty()) {" + NL + "\t\t\thibernateDao.update(updateList);" + NL + "\t\t\tupdateCount = updateList.size();" + NL + "\t\t}" + NL + "\t\tmsgSb.append(\"共成功导入\" + (addCount+updateCount) + \"项记录!\");" + NL + "\t\tif(addCount!=0){" + NL + "\t\t\tmsgSb.append(\" 新增:\"+addCount+\"项.\");" + NL + "\t\t}" + NL + "\t\tif(updateCount!=0){" + NL + "\t\t\tmsgSb.append(\" 更新:\"+updateCount+\"项.\");" + NL + "\t\t}" + NL + "\t\tresult.setMessage(msgSb.toString());" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_848 = "\t";
  protected final String TEXT_849 = "\t\t\t";
  protected final String TEXT_850 = "\t";
  protected final String TEXT_851 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * 获取所有";
  protected final String TEXT_852 = "对象用于构造keyLabel,只获取key,label属性." + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic List<KeyLabel> getAllForKeyLabel(){" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_853 = "(m.";
  protected final String TEXT_854 = ",m.";
  protected final String TEXT_855 = ") from ";
  protected final String TEXT_856 = " m\";" + NL + "\t\treturn hibernateDao.createQuery(hql).list();" + NL + "\t}";
  protected final String TEXT_857 = NL + NL + "\t@SuppressWarnings(\"unchecked\")" + NL + "\tpublic List<";
  protected final String TEXT_858 = "> getGallaryList(Order[] orders) {" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_859 = "(";
  protected final String TEXT_860 = ") from ";
  protected final String TEXT_861 = " m\";" + NL + "\t\tStringBuilder hqlsb = new StringBuilder(hql);" + NL + "\t\tif (null != orders) {" + NL + "\t\t\thqlsb.append(\" order by \");" + NL + "\t\t\tint loop = orders.length;" + NL + "\t\t\tfor (int i = 0; i < loop; i++) {" + NL + "\t\t\t\tif(i==0){" + NL + "\t\t\t\t\thqlsb.append(\",\");" + NL + "\t\t\t\t}" + NL + "\t\t\t\thqlsb.append(orders[i].toSql());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn hibernateDao.createQuery(hqlsb.toString()).list();" + NL + "\t}";
  protected final String TEXT_862 = "\t";
  protected final String TEXT_863 = "\t";
  protected final String TEXT_864 = "\t";
  protected final String TEXT_865 = NL + NL + "\t/*****************************************************************" + NL + "\t * manage by ";
  protected final String TEXT_866 = NL + "\t *****************************************************************/" + NL + "" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_867 = "(";
  protected final String TEXT_868 = ")\"关联的\"";
  protected final String TEXT_869 = "(";
  protected final String TEXT_870 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic Page<";
  protected final String TEXT_871 = "> findBy";
  protected final String TEXT_872 = "(String ";
  protected final String TEXT_873 = ",Page<";
  protected final String TEXT_874 = "> page, ";
  protected final String TEXT_875 = " rto, Order[] orders) {";
  protected final String TEXT_876 = NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_877 = ", \"未指定";
  protected final String TEXT_878 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_879 = "\", ";
  protected final String TEXT_880 = ");";
  protected final String TEXT_881 = NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_882 = "())) {//";
  protected final String TEXT_883 = " ";
  protected final String TEXT_884 = "\t\t";
  protected final String TEXT_885 = "\t";
  protected final String TEXT_886 = "\t" + NL + "\t\t\tDate ";
  protected final String TEXT_887 = " = DateUtil.getDayStart(DateUtil.parseDate(rto.get";
  protected final String TEXT_888 = "()));" + NL + "\t\t\tcondition.addGe(";
  protected final String TEXT_889 = ".";
  protected final String TEXT_890 = ".getFieldName(), ";
  protected final String TEXT_891 = ");" + NL + "\t\t}" + NL + "\t\tif (StringUtils.isNotBlank(rto.get";
  protected final String TEXT_892 = "())) {" + NL + "\t\t\tDate ";
  protected final String TEXT_893 = " = DateUtil.getDayEnd(DateUtil.parseDate(rto.get";
  protected final String TEXT_894 = "()));" + NL + "\t\t\tcondition.addLe(";
  protected final String TEXT_895 = ".";
  protected final String TEXT_896 = ".getFieldName(), ";
  protected final String TEXT_897 = ");" + NL + "\t\t}";
  protected final String TEXT_898 = NL + "\t\tcondition.";
  protected final String TEXT_899 = ";//";
  protected final String TEXT_900 = " ";
  protected final String TEXT_901 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_902 = NL + "\t\treturn hibernateDao.find(entityClass, page, condition, orders);";
  protected final String TEXT_903 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 查询\"";
  protected final String TEXT_904 = "(";
  protected final String TEXT_905 = ")\"关联的\"";
  protected final String TEXT_906 = "(";
  protected final String TEXT_907 = ")\"." + NL + "\t * " + NL + "\t */" + NL + "\tpublic List<";
  protected final String TEXT_908 = "> findBy";
  protected final String TEXT_909 = "(String ";
  protected final String TEXT_910 = ") {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_911 = ", \"未指定";
  protected final String TEXT_912 = "!\");" + NL + "\t\tCondition condition = Condition.and();" + NL + "\t\tcondition.addEq(\"";
  protected final String TEXT_913 = "\", ";
  protected final String TEXT_914 = ");" + NL + "\t\treturn hibernateDao.find(entityClass, condition);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 保存\"";
  protected final String TEXT_915 = "(";
  protected final String TEXT_916 = ")\"关联的\"";
  protected final String TEXT_917 = "(";
  protected final String TEXT_918 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_919 = " saveBy";
  protected final String TEXT_920 = "(String ";
  protected final String TEXT_921 = ",";
  protected final String TEXT_922 = " rto) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_923 = ", \"未指定";
  protected final String TEXT_924 = "!\");" + NL + "\t\t";
  protected final String TEXT_925 = " newModel=rto.getNewModel();" + NL + "\t\tnewModel.";
  protected final String TEXT_926 = "(";
  protected final String TEXT_927 = ");" + NL + "\t\thibernateDao.save(newModel);" + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * 更新\"";
  protected final String TEXT_928 = "(";
  protected final String TEXT_929 = ")\"关联的\"";
  protected final String TEXT_930 = "(";
  protected final String TEXT_931 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic ";
  protected final String TEXT_932 = " updateBy";
  protected final String TEXT_933 = "(String ";
  protected final String TEXT_934 = ",";
  protected final String TEXT_935 = " rto) {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_936 = ", \"未指定";
  protected final String TEXT_937 = "!\");" + NL + "\t\t";
  protected final String TEXT_938 = " old";
  protected final String TEXT_939 = " = get(rto.getId());" + NL + "\t\tAppAssert.notNull(old";
  protected final String TEXT_940 = ", \"您更新的记录不存在!\");" + NL + "\t\t";
  protected final String TEXT_941 = " newModel = rto.getModifiedModel(old";
  protected final String TEXT_942 = ");" + NL + "\t\tnewModel.";
  protected final String TEXT_943 = "(";
  protected final String TEXT_944 = ");" + NL + "\t\t// hibernateDao.save(";
  protected final String TEXT_945 = ");//in session will auto update" + NL + "\t\treturn newModel;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * 删除所有\"";
  protected final String TEXT_946 = "(";
  protected final String TEXT_947 = ")\"关联的\"";
  protected final String TEXT_948 = "(";
  protected final String TEXT_949 = ")\"." + NL + "\t * " + NL + "\t * @generated" + NL + "\t */" + NL + "\t@Transactional" + NL + "\tpublic int deleteAllBy";
  protected final String TEXT_950 = "(String ";
  protected final String TEXT_951 = ") {" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_952 = ", \"未指定";
  protected final String TEXT_953 = "!\");" + NL + "\t\tfinal String hql = \"delete from \" + entityClass.getName() + \" m where m.";
  protected final String TEXT_954 = "=?\";" + NL + "\t\treturn hibernateDao.executeUpdate(hql, ";
  protected final String TEXT_955 = ");" + NL + "\t}" + NL + "\t" + NL + "\t";
  protected final String TEXT_956 = "\t\t\t";
  protected final String TEXT_957 = "\t";
  protected final String TEXT_958 = "\t\t" + NL + "\t/**" + NL + "\t * 根据";
  protected final String TEXT_959 = "获取所有";
  protected final String TEXT_960 = "对象用于构造keyLabel,只获取key,label属性." + NL + "\t * @generated" + NL + "\t */" + NL + "\tpublic List<KeyLabel> getAllForKeyLabelBy";
  protected final String TEXT_961 = "(String ";
  protected final String TEXT_962 = "){" + NL + "\t\tAppAssert.notNull(";
  protected final String TEXT_963 = ", \"未指定";
  protected final String TEXT_964 = "!\");" + NL + "\t\tfinal String hql = \"select new ";
  protected final String TEXT_965 = "(m.";
  protected final String TEXT_966 = ",m.";
  protected final String TEXT_967 = ") from ";
  protected final String TEXT_968 = " m where m.";
  protected final String TEXT_969 = "=?\";" + NL + "\t\treturn hibernateDao.find(hql,";
  protected final String TEXT_970 = ");" + NL + "\t}";
  protected final String TEXT_971 = "\t" + NL + "" + NL + "}";
  protected final String TEXT_972 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    Class uml2Class_proxy = (Class) argument;
    //Package uml2Package_proxy = uml2Class_proxy.getPackage();
    //@ include file="../../../../Header.jetinc"
    if(ModelStereoTypeHelper.isApplyModel_M2mWithId(uml2Class_proxy)){//应用了M2MWithId
    Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();
    
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//generic service impl
ClassNameDefineCommon serviceGenericImplDefine=clazzWrap.getNameDefineServiceGenericImpl();
String serviceGenericImplClassName=serviceGenericImplDefine.getClassCapName();
String serviceGenericImplUncapClassName=serviceGenericImplDefine.getClassUncapName();
String serviceGenericImplPackageName=serviceGenericImplDefine.getPackageQualifiedName();


    stringBuffer.append(TEXT_1);
    stringBuffer.append(serviceGenericImplPackageName);
    stringBuffer.append(TEXT_2);
    ImportManager importManager = ImportHelper.makeImportManager("");
    
// add imports
importManager.addImport("java.util.List");
importManager.addImport("org.springframework.beans.factory.annotation.Autowired");
importManager.addImport("com.jeefuse.base.modules.condition.order.Order");
importManager.addImport("com.jeefuse.base.utils.page.Page");
importManager.addImport("com.jeefuse.base.modules.condition.criteria.Condition");
importManager.addImport("org.springframework.util.Assert");
importManager.addImport(Config.base_ServiceGenericImplQualifiedName);
String baseServiceGenericImplClassName=MdaHelper.getBriefClassName(Config.base_ServiceGenericImplQualifiedName);

//base
importManager.addImport(Config.base_HibernateDao);

//model RTO define
ClassNameDefineCommon rtoDefine=clazzWrap.getNameDefineRTO();
String modelRTOQualifiedName=rtoDefine.getClassQualifiedName();
importManager.addImport(modelRTOQualifiedName);

//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);

//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);

// generic service
ClassNameDefineCommon serviceGenericDefine=clazzWrap.getNameDefineServiceGeneric();
String modelServiceGenericQualifiedName=serviceGenericDefine.getClassQualifiedName();
String modelServiceGenericClassName=serviceGenericDefine.getClassCapName();
importManager.addImport(modelServiceGenericQualifiedName);

    stringBuffer.append(TEXT_3);
    
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());

    stringBuffer.append(TEXT_4);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(System.getProperty("user.name"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(ImportHelper.getImportedName("org.springframework.stereotype.Service"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(baseServiceGenericImplClassName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(EntityHelper.getIDPropertyImportType(uml2Class));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(modelServiceGenericClassName);
    stringBuffer.append(TEXT_13);
    /********rel first entity********/
    List<Property> propertyList=EntityHelper.getAllOneToManyProperties(uml2Class,false);
    Property firstProperty=propertyList.get(0);
    Class firstPropertyClass=(Class)firstProperty.getType();
    String firstPropertyModelCapName=NameHelper.getCapName(firstPropertyClass);
    String firstPropertyModelUncapName=NameHelper.getUncapName(firstPropertyClass);
    String firstPropertyModelCommentName=TypeHelper.getDocumentationOrName(firstPropertyClass);
    String firstPropertyEntityQualifiedName=MdaHelper.getEntityQualifiedName(firstPropertyClass);
    importManager.addImport(firstPropertyEntityQualifiedName);
    /********rel second entity********/
    Property secondProperty=propertyList.get(1);
    Class  secondPropertyClass=(Class)secondProperty.getType();
    String secondPropertyModelCapName=NameHelper.getCapName(firstPropertyClass);
    String secondPropertyModelUncapName=NameHelper.getUncapName(firstPropertyClass);
    String secondPropertyModelCommentName=TypeHelper.getDocumentationOrName(secondPropertyClass);
    String secondPropertyEntityQualifiedName=MdaHelper.getEntityQualifiedName(secondPropertyClass);
    importManager.addImport(secondPropertyEntityQualifiedName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_16);
    //ower
    String owerClassCapName=firstPropertyModelCapName;
    String owerClassUncapName=firstPropertyModelUncapName;
    String owerClassCommentName=firstPropertyModelCommentName;
    String owerClassId=owerClassCapName+"Id";
    //rel
    String relClassCapName=secondPropertyModelCapName;
    String relClassUncapName=secondPropertyModelUncapName;
    String relClassIds=secondPropertyModelCapName+"Ids";
    String relClassId=relClassCapName+"Id";
    String relClassCommentName=secondPropertyModelCommentName;
    stringBuffer.append(TEXT_17);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_50);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_91);
    //ower
    owerClassCapName=secondPropertyModelCapName;
    owerClassUncapName=secondPropertyModelUncapName;
    owerClassCommentName=secondPropertyModelCommentName;
    owerClassId=owerClassCapName+"Id";
    //rel
    relClassCapName=firstPropertyModelCapName;
    relClassUncapName=firstPropertyModelUncapName;
    relClassCommentName=firstPropertyModelCommentName;
    relClassId=relClassCapName+"Id";
    relClassIds=firstPropertyModelCapName+"Ids";
    stringBuffer.append(TEXT_92);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_94);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_99);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_105);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(firstPropertyModelCommentName);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(secondPropertyModelCommentName);
    stringBuffer.append(TEXT_109);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_110);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_115);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_117);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_118);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_119);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_120);
    stringBuffer.append(relClassCommentName);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_122);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_125);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_126);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_127);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(owerClassCommentName);
    stringBuffer.append(TEXT_130);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_131);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_132);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_133);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_137);
    stringBuffer.append(relClassIds);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_139);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_140);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_141);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_142);
    stringBuffer.append(owerClassId);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_145);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_147);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_150);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_154);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_155);
    stringBuffer.append(relClassId);
    stringBuffer.append(TEXT_156);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(relClassCapName);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(relClassUncapName);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_160);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_161);
    stringBuffer.append(owerClassCapName);
    stringBuffer.append(TEXT_162);
    stringBuffer.append(owerClassUncapName);
    stringBuffer.append(TEXT_163);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_164);
    importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());
    }else if(ModelStereoTypeHelper.isApplyModel_Tree(uml2Class_proxy)){//应用了tree
    	if(null!=TreeStereotypeHelper.getProperty_layerCode(uml2Class_proxy)){
    Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();
    
/*******clazz wrap********/	
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//generic service impl
ClassNameDefineCommon serviceGenericImplDefine=clazzWrap.getNameDefineServiceGenericImpl();
String serviceGenericImplClassName=serviceGenericImplDefine.getClassCapName();
String serviceGenericImplUncapClassName=serviceGenericImplDefine.getClassUncapName();
String serviceGenericImplPackageName=serviceGenericImplDefine.getPackageQualifiedName();


    stringBuffer.append(TEXT_165);
    stringBuffer.append(serviceGenericImplPackageName);
    stringBuffer.append(TEXT_166);
    ImportManager importManager = ImportHelper.makeImportManager("");
    

// add imports
importManager.addImport("java.util.List");
importManager.addImport("org.springframework.beans.factory.annotation.Autowired");
importManager.addImport("com.jeefuse.base.modules.condition.order.Order");
importManager.addImport("com.jeefuse.base.utils.page.Page");
importManager.addImport("com.jeefuse.base.modules.condition.criteria.Condition");
importManager.addImport("com.jeefuse.base.exception.AppAssert");
importManager.addImport("org.springframework.util.Assert");
importManager.addImport(Config.base_ServiceGenericImplQualifiedName);
String baseServiceGenericImplClassName=MdaHelper.getBriefClassName(Config.base_ServiceGenericImplQualifiedName);
//base
String baseHibernateDaoName=ImportHelper.getImportedName(Config.base_HibernateDao);
String baseHibernateDaoUncapName=NameHelper.uncapName(baseHibernateDaoName);

//model RTO define
ClassNameDefineCommon rtoDefine=clazzWrap.getNameDefineRTO();
String modelRTOQualifiedName=rtoDefine.getClassQualifiedName();
String modelRTOName=rtoDefine.getClassCapName();
importManager.addImport(modelRTOQualifiedName);

//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);

//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);

// generic service
ClassNameDefineCommon serviceGenericDefine=clazzWrap.getNameDefineServiceGeneric();
String modelServiceGenericQualifiedName=serviceGenericDefine.getClassQualifiedName();
String modelServiceGenericClassName=serviceGenericDefine.getClassCapName();
importManager.addImport(modelServiceGenericQualifiedName);

    stringBuffer.append(TEXT_167);
    
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());

    stringBuffer.append(TEXT_168);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_169);
    stringBuffer.append(System.getProperty("user.name"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(ImportHelper.getImportedName("org.springframework.stereotype.Service"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_172);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_173);
    stringBuffer.append(baseServiceGenericImplClassName);
    stringBuffer.append(TEXT_174);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_175);
    stringBuffer.append(EntityHelper.getIDPropertyImportType(uml2Class));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(modelServiceGenericClassName);
    stringBuffer.append(TEXT_177);
    	importManager.addImport("com.jeefuse.base.utils.tree.TreeLayerCodeUtil");
    stringBuffer.append(TEXT_178);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_179);
    stringBuffer.append(TreeStereotypeHelper.getValue_layerDeep(uml2Class));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_181);
    stringBuffer.append(OrderByHelper.getOrderField(uml2Class));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(OrderByHelper.getOrderMode(uml2Class).toUpperCase());
    stringBuffer.append(TEXT_183);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_184);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_185);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_186);
    stringBuffer.append(baseHibernateDaoName);
    stringBuffer.append(TEXT_187);
    stringBuffer.append(baseHibernateDaoUncapName);
    stringBuffer.append(TEXT_188);
    stringBuffer.append(baseHibernateDaoUncapName);
    stringBuffer.append(TEXT_189);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_190);
    //importManager.addImport("com.jeefuse.base.exception.ValidateViolationException");
    importManager.addImport("org.springframework.transaction.annotation.Transactional");
    stringBuffer.append(TEXT_191);
    importManager.addImport("com.jeefuse.base.exception.DataNoExistException");
    importManager.addImport("com.jeefuse.base.exception.InvalidDataException");
    stringBuffer.append(TEXT_192);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_193);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_194);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_195);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_196);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_197);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_198);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_199);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_200);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_201);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_202);
    importManager.addImport("com.jeefuse.base.modules.condition.order.OrderSet");
    importManager.addImport("com.jeefuse.base.modules.condition.order.OrderMode");
    stringBuffer.append(TEXT_203);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_204);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_205);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_206);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_207);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_208);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_209);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_210);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_211);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_212);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_213);
    List<Property> searchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);
    stringBuffer.append(TEXT_214);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:searchList){
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_215);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_216);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_217);
    stringBuffer.append(propertyCommentName);
    		importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_218);
    		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_219);
    		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_220);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_221);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_222);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_223);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_224);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_225);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_226);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_227);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_228);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_229);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_230);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_231);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_232);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_234);
    stringBuffer.append(propertyCommentName);
    		}
     }
    stringBuffer.append(TEXT_235);
    }else{
    stringBuffer.append(TEXT_236);
    }
    stringBuffer.append(TEXT_237);
    importManager.addImport("com.jeefuse.base.web.result.ResultMsg");
    importManager.addImport("java.lang.StringBuilder");
    importManager.addImport("java.util.ArrayList");
    importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_238);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_239);
    stringBuffer.append(MethodNamedRuleKind.importDatas.getRuleNamed(uml2Class));
    stringBuffer.append(TEXT_240);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_241);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_242);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_243);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_244);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_245);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_246);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_247);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_248);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_249);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_250);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_251);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_252);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_253);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_254);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_255);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_256);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_257);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_258);
    stringBuffer.append(modelRTOQualifiedName);
    stringBuffer.append(TEXT_259);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:searchList){
    		if(TreeStereotypeHelper.isParentIdProperty(searchProperty)){
    			continue;
    		}
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_260);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_261);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_262);
    stringBuffer.append(propertyCommentName);
    			importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_263);
    			importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_264);
    			importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_265);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_266);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_267);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_268);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_269);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_270);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_271);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_272);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_273);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_274);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_275);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_276);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_277);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_278);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_279);
    stringBuffer.append(propertyCommentName);
    		}
     }
    }
    stringBuffer.append(TEXT_280);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_281);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_282);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_283);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_284);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_285);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_286);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_287);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_288);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_289);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_290);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_291);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_292);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_293);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_294);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_295);
    importManager.addImport("com.jeefuse.base.modules.condition.order.OrderSet");
    importManager.addImport("com.jeefuse.base.modules.condition.order.OrderMode");
    stringBuffer.append(TEXT_296);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_297);
    stringBuffer.append(OrderByHelper.getOrderField(uml2Class));
    stringBuffer.append(TEXT_298);
    stringBuffer.append(OrderByHelper.getOrderMode(uml2Class).toUpperCase());
    stringBuffer.append(TEXT_299);
    		importManager.addImport("com.jeefuse.base.modules.tree.renders.treeview.TreeViewItem");
    		Property keyProperty=TreeStereotypeHelper.getProperty_id(uml2Class);
    stringBuffer.append(TEXT_300);
    		String keyPropertyName=NameHelper.uncapSafeName(keyProperty);
    		/********keyProperty accessor ********/
    		String keyPropertyGetAccessorName=ClassHelper.getGetAccessor(keyProperty);
    stringBuffer.append(TEXT_301);
    		//String keyPropertySetAccessorName="set"+ClassHelper.getAccessorName(keyProperty);
    stringBuffer.append(TEXT_302);
    		Property listLabelProperty=TreeStereotypeHelper.getProperty_listLabel(uml2Class);
    stringBuffer.append(TEXT_303);
    		String listLabelPropertyName=NameHelper.uncapSafeName(listLabelProperty);
    		String listLabelPropertyGetAccessorName=ClassHelper.getGetAccessor(listLabelProperty);
    stringBuffer.append(TEXT_304);
    		//Property layerCodeProperty=TreeStereotypeHelper.getProperty_layerCode(uml2Class);
    stringBuffer.append(TEXT_305);
    		//String layerCodePropertyName=NameHelper.uncapSafeName(layerCodeProperty);
    		//Property parentIdProperty=TreeStereotypeHelper.getProperty_parentId(uml2Class);
    stringBuffer.append(TEXT_306);
    		//String parentIdPropertyName=NameHelper.uncapSafeName(parentIdProperty);
    stringBuffer.append(TEXT_307);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_308);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_309);
    stringBuffer.append(listLabelPropertyName);
    stringBuffer.append(TEXT_310);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_311);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_312);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_313);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_314);
    stringBuffer.append(listLabelPropertyName);
    stringBuffer.append(TEXT_315);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_316);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_317);
    	if(KeyLabelStereotypeHelper.isApply(uml2Class)){
    		importManager.addImport("com.jeefuse.base.modules.keyLabel.KeyLabel");
    		String classGetAllForKeyLabel=clazzWrap.getNamedRuleProperty(PropertyNamedRuleKind.getAllForKeyLabel);
    stringBuffer.append(TEXT_318);
    		Property keyLable_listKeyProperty=KeyLabelStereotypeHelper.getProperty_liskKey(uml2Class);
    stringBuffer.append(TEXT_319);
    		String keyLable_listKeyPropertyName=NameHelper.uncapSafeName(keyLable_listKeyProperty);
    		//String keyLable_listKeyPropertyGetAccessorName=ClassHelper.getGetAccessor(keyLable_listKeyProperty);
    stringBuffer.append(TEXT_320);
    		//String keyLable_listKeyPropertySetAccessorName="set"+ClassHelper.getAccessorName(keyLable_listKeyProperty);
    stringBuffer.append(TEXT_321);
    		Property keyLable_listLabelProperty=KeyLabelStereotypeHelper.getProperty_listLabel(uml2Class);
    stringBuffer.append(TEXT_322);
    		String keyLable_listLabelPropertyName=NameHelper.uncapSafeName(keyLable_listLabelProperty);
    		//String keyLable_listLabelPropertyGetAccessorName=ClassHelper.getGetAccessor(keyLable_listLabelProperty);
    stringBuffer.append(TEXT_323);
    		//String keyLable_listLabelPropertySetAccessorName="set"+ClassHelper.getAccessorName(keyLable_listLabelProperty);
    stringBuffer.append(TEXT_324);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_325);
    stringBuffer.append(classGetAllForKeyLabel);
    stringBuffer.append(TEXT_326);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_327);
    stringBuffer.append(keyLable_listKeyPropertyName);
    stringBuffer.append(TEXT_328);
    stringBuffer.append(keyLable_listLabelPropertyName);
    stringBuffer.append(TEXT_329);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_330);
    	}
    /********process M2OPropertyList start********/
    stringBuffer.append(TEXT_331);
    List<Property> M2OPropertyList=EntityHelper.getAllManyToOnePropertiesAndApplyManageByProperty(uml2Class,false);
    for (Iterator<Property> iter=M2OPropertyList.iterator();iter.hasNext();){
    		Property property=iter.next();
     		//String propertyComment=TypeHelper.getDocumentationOrName(property);
    		//String propertyGet=ClassHelper.getGetAccessor(property);
     		String propertyUncapName=NameHelper.uncapSafeName(property);
     		String propertyName=NameHelper.getCapName(property);
    		UmlClassByPropertyWrap named=new UmlClassByPropertyWrap(property);
    		String byPropertyValue=named.getValueName();
    		String byPropertyValueCamelName=named.getValueName();
    		//String byPropertyValueGetAccessor=named.getValueGetAccessor();
    stringBuffer.append(TEXT_332);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_333);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_334);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_335);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_336);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_337);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_338);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_339);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_340);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_341);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_342);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_343);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_344);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_345);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_346);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_347);
    List<Property> O2MSearchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);
    if(null!=O2MSearchList&&O2MSearchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:O2MSearchList){
    		if(property.getName().equals(searchProperty.getName()))continue;
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(property);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_348);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_349);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_350);
    stringBuffer.append(propertyCommentName);
    		importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_351);
    		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_352);
    		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_353);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_354);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_355);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_356);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_357);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_358);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_359);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_360);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_361);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_362);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_363);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_364);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_365);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_366);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_367);
    stringBuffer.append(propertyCommentName);
    		}
     }
    stringBuffer.append(TEXT_368);
    }else{
    stringBuffer.append(TEXT_369);
    }
    stringBuffer.append(TEXT_370);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_371);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_372);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_373);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_374);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_375);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_376);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_377);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_378);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_379);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_380);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_381);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_382);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_383);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_384);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_385);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_386);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_387);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_388);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_389);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_390);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_391);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_392);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_393);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_394);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:searchList){
    		if(TreeStereotypeHelper.isParentIdProperty(searchProperty)){
    			continue;
    		}
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_395);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_396);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_397);
    stringBuffer.append(propertyCommentName);
    			importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_398);
    			importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_399);
    			importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_400);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_401);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_402);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_403);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_404);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_405);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_406);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_407);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_408);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_409);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_410);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_411);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_412);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_413);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_414);
    stringBuffer.append(propertyCommentName);
    		}
     }
    }
    stringBuffer.append(TEXT_415);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_416);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_417);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_418);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_419);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_420);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_421);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_422);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_423);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_424);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_425);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_426);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_427);
    stringBuffer.append(named.getSetValueMethod());
    stringBuffer.append(TEXT_428);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_429);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_430);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_431);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_432);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_433);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_434);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_435);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_436);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_437);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_438);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_439);
    stringBuffer.append(named.getSetValueMethod());
    stringBuffer.append(TEXT_440);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_441);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_442);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_443);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_444);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_445);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_446);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_447);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_448);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_449);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_450);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_451);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_452);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_453);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_454);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_455);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_456);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_457);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_458);
    }
    /********process M2OPropertyList end********/
    stringBuffer.append(TEXT_459);
    importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());
    	}else{
    Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();
    
/*******clazz wrap********/	
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();
Property uml2ClassIdProperty=EntityHelper.getIDProperty(uml2Class);
String uml2ClassIdPropertyUncapSafeName=NameHelper.uncapSafeName(uml2ClassIdProperty);

//generic service impl
ClassNameDefineCommon serviceGenericImplDefine=clazzWrap.getNameDefineServiceGenericImpl();
String serviceGenericImplClassName=serviceGenericImplDefine.getClassCapName();
String serviceGenericImplUncapClassName=serviceGenericImplDefine.getClassUncapName();
String serviceGenericImplPackageName=serviceGenericImplDefine.getPackageQualifiedName();


    stringBuffer.append(TEXT_460);
    stringBuffer.append(serviceGenericImplPackageName);
    stringBuffer.append(TEXT_461);
    ImportManager importManager = ImportHelper.makeImportManager("");
    

// add imports
importManager.addImport("java.util.List");
importManager.addImport("org.springframework.beans.factory.annotation.Autowired");
importManager.addImport("com.jeefuse.base.modules.condition.order.Order");
importManager.addImport("com.jeefuse.base.utils.page.Page");
importManager.addImport("com.jeefuse.base.modules.condition.criteria.Condition");
importManager.addImport("com.jeefuse.base.modules.condition.order.OrderSet");
importManager.addImport("com.jeefuse.base.exception.AppAssert");
importManager.addImport("org.springframework.util.Assert");
importManager.addImport("java.util.Set");
importManager.addImport("java.util.HashSet");
//importManager.addImport("org.springframework.util.Assert");
importManager.addImport(Config.base_ServiceGenericImplQualifiedName);
String baseServiceGenericImplClassName=MdaHelper.getBriefClassName(Config.base_ServiceGenericImplQualifiedName);

//base
String baseHibernateDaoName=ImportHelper.getImportedName(Config.base_HibernateDao);
String baseHibernateDaoUncapName=NameHelper.uncapName(baseHibernateDaoName);

//model RTO define
ClassNameDefineCommon rtoDefine=clazzWrap.getNameDefineRTO();
String modelRTOQualifiedName=rtoDefine.getClassQualifiedName();
String modelRTOName=rtoDefine.getClassCapName();
importManager.addImport(modelRTOQualifiedName);

//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);

//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);

// generic service
ClassNameDefineCommon serviceGenericDefine=clazzWrap.getNameDefineServiceGeneric();
String modelServiceGenericQualifiedName=serviceGenericDefine.getClassQualifiedName();
String modelServiceGenericClassName=serviceGenericDefine.getClassCapName();
importManager.addImport(modelServiceGenericQualifiedName);

    stringBuffer.append(TEXT_462);
    
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());

    stringBuffer.append(TEXT_463);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_464);
    stringBuffer.append(System.getProperty("user.name"));
    stringBuffer.append(TEXT_465);
    stringBuffer.append(ImportHelper.getImportedName("org.springframework.stereotype.Service"));
    stringBuffer.append(TEXT_466);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_467);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_468);
    stringBuffer.append(baseServiceGenericImplClassName);
    stringBuffer.append(TEXT_469);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_470);
    stringBuffer.append(EntityHelper.getIDPropertyImportType(uml2Class));
    stringBuffer.append(TEXT_471);
    stringBuffer.append(modelServiceGenericClassName);
    stringBuffer.append(TEXT_472);
    	importManager.addImport("com.jeefuse.base.utils.tree.TreeLayerCodeUtil");
    stringBuffer.append(TEXT_473);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_474);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_475);
    stringBuffer.append(OrderByHelper.getOrderField(uml2Class));
    stringBuffer.append(TEXT_476);
    stringBuffer.append(OrderByHelper.getOrderMode(uml2Class).toUpperCase());
    stringBuffer.append(TEXT_477);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_478);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_479);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_480);
    stringBuffer.append(baseHibernateDaoName);
    stringBuffer.append(TEXT_481);
    stringBuffer.append(baseHibernateDaoUncapName);
    stringBuffer.append(TEXT_482);
    stringBuffer.append(baseHibernateDaoUncapName);
    stringBuffer.append(TEXT_483);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_484);
    //importManager.addImport("com.jeefuse.base.exception.ValidateViolationException");
    importManager.addImport("org.springframework.transaction.annotation.Transactional");
    stringBuffer.append(TEXT_485);
    importManager.addImport("com.jeefuse.base.exception.DataNoExistException");
    importManager.addImport("com.jeefuse.base.exception.InvalidDataException");
    stringBuffer.append(TEXT_486);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_487);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_488);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_489);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_490);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_491);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_492);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_493);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_494);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_495);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_496);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_497);
    importManager.addImport("com.jeefuse.base.modules.condition.order.OrderSet");
    importManager.addImport("com.jeefuse.base.modules.condition.order.OrderMode");
    stringBuffer.append(TEXT_498);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_499);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_500);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_501);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_502);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_503);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_504);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_505);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_506);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_507);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_508);
    List<Property> searchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);
    stringBuffer.append(TEXT_509);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:searchList){
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_510);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_511);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_512);
    stringBuffer.append(propertyCommentName);
    		importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_513);
    		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_514);
    		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_515);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_516);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_517);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_518);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_519);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_520);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_521);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_522);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_523);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_524);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_525);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_526);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_527);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_528);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_529);
    stringBuffer.append(propertyCommentName);
    		}
     }
    stringBuffer.append(TEXT_530);
    }else{
    stringBuffer.append(TEXT_531);
    }
    stringBuffer.append(TEXT_532);
    importManager.addImport("com.jeefuse.base.web.result.ResultMsg");
    importManager.addImport("java.lang.StringBuilder");
    importManager.addImport("java.util.ArrayList");
    importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_533);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_534);
    stringBuffer.append(MethodNamedRuleKind.importDatas.getRuleNamed(uml2Class));
    stringBuffer.append(TEXT_535);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_536);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_537);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_538);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_539);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_540);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_541);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_542);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_543);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_544);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_545);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_546);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_547);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_548);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_549);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_550);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_551);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_552);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_553);
    stringBuffer.append(modelRTOQualifiedName);
    stringBuffer.append(TEXT_554);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:searchList){
    		if(TreeStereotypeHelper.isParentIdProperty(searchProperty)){
    			continue;
    		}
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_555);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_556);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_557);
    stringBuffer.append(propertyCommentName);
    			importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_558);
    			importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_559);
    			importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_560);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_561);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_562);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_563);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_564);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_565);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_566);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_567);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_568);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_569);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_570);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_571);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_572);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_573);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_574);
    stringBuffer.append(propertyCommentName);
    		}
     }
    }
    stringBuffer.append(TEXT_575);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_576);
    stringBuffer.append(uml2ClassIdPropertyUncapSafeName);
    stringBuffer.append(TEXT_577);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_578);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_579);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_580);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_581);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_582);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_583);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_584);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_585);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_586);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_587);
    stringBuffer.append(uml2ClassIdPropertyUncapSafeName);
    stringBuffer.append(TEXT_588);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_589);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_590);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_591);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_592);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_593);
    stringBuffer.append(uml2ClassIdPropertyUncapSafeName);
    stringBuffer.append(TEXT_594);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_595);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_596);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_597);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_598);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_599);
    		importManager.addImport("com.jeefuse.base.modules.tree.renders.treeview.TreeViewItem");
    		Property keyProperty=TreeStereotypeHelper.getProperty_id(uml2Class);
    stringBuffer.append(TEXT_600);
    		String keyPropertyName=NameHelper.uncapSafeName(keyProperty);
    		/********keyProperty accessor ********/
    		//String keyPropertyGetAccessorName=ClassHelper.getGetAccessor(keyProperty);
    stringBuffer.append(TEXT_601);
    		//String keyPropertySetAccessorName="set"+ClassHelper.getAccessorName(keyProperty);
    stringBuffer.append(TEXT_602);
    		Property listLabelProperty=TreeStereotypeHelper.getProperty_listLabel(uml2Class);
    stringBuffer.append(TEXT_603);
    		String listLabelPropertyName=NameHelper.uncapSafeName(listLabelProperty);
    		//String listLabelPropertyGetAccessorName=ClassHelper.getGetAccessor(listLabelProperty);
    stringBuffer.append(TEXT_604);
    		//Property layerCodeProperty=TreeStereotypeHelper.getProperty_layerCode(uml2Class);
    stringBuffer.append(TEXT_605);
    		//String layerCodePropertyName=NameHelper.uncapSafeName(layerCodeProperty);
    		//Property parentIdProperty=TreeStereotypeHelper.getProperty_parentId(uml2Class);
    stringBuffer.append(TEXT_606);
    		//String parentIdPropertyName=NameHelper.uncapSafeName(parentIdProperty);
    stringBuffer.append(TEXT_607);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_608);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_609);
    stringBuffer.append(listLabelPropertyName);
    stringBuffer.append(TEXT_610);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_611);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_612);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_613);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_614);
    stringBuffer.append(listLabelPropertyName);
    stringBuffer.append(TEXT_615);
    stringBuffer.append(keyPropertyName);
    stringBuffer.append(TEXT_616);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_617);
    	if(KeyLabelStereotypeHelper.isApply(uml2Class)){
    		importManager.addImport("com.jeefuse.base.modules.keyLabel.KeyLabel");
    		String classGetAllForKeyLabel=clazzWrap.getNamedRuleProperty(PropertyNamedRuleKind.getAllForKeyLabel);
    stringBuffer.append(TEXT_618);
    		Property keyLable_listKeyProperty=KeyLabelStereotypeHelper.getProperty_liskKey(uml2Class);
    stringBuffer.append(TEXT_619);
    		String keyLable_listKeyPropertyName=NameHelper.uncapSafeName(keyLable_listKeyProperty);
    		//String keyLable_listKeyPropertyGetAccessorName=ClassHelper.getGetAccessor(keyLable_listKeyProperty);
    stringBuffer.append(TEXT_620);
    		//String keyLable_listKeyPropertySetAccessorName="set"+ClassHelper.getAccessorName(keyLable_listKeyProperty);
    stringBuffer.append(TEXT_621);
    		Property keyLable_listLabelProperty=KeyLabelStereotypeHelper.getProperty_listLabel(uml2Class);
    stringBuffer.append(TEXT_622);
    		String keyLable_listLabelPropertyName=NameHelper.uncapSafeName(keyLable_listLabelProperty);
    		//String keyLable_listLabelPropertyGetAccessorName=ClassHelper.getGetAccessor(keyLable_listLabelProperty);
    stringBuffer.append(TEXT_623);
    		//String keyLable_listLabelPropertySetAccessorName="set"+ClassHelper.getAccessorName(keyLable_listLabelProperty);
    stringBuffer.append(TEXT_624);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_625);
    stringBuffer.append(classGetAllForKeyLabel);
    stringBuffer.append(TEXT_626);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_627);
    stringBuffer.append(keyLable_listKeyPropertyName);
    stringBuffer.append(TEXT_628);
    stringBuffer.append(keyLable_listLabelPropertyName);
    stringBuffer.append(TEXT_629);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_630);
    	}
    /********process M2OPropertyList start********/
    stringBuffer.append(TEXT_631);
    List<Property> M2OPropertyList=EntityHelper.getAllManyToOnePropertiesAndApplyManageByProperty(uml2Class,false);
    for (Iterator<Property> iter=M2OPropertyList.iterator();iter.hasNext();){
    		Property property=iter.next();
     		//String propertyComment=TypeHelper.getDocumentationOrName(property);
    		//String propertyGet=ClassHelper.getGetAccessor(property);
     		String propertyUncapName=NameHelper.uncapSafeName(property);
     		String propertyName=NameHelper.getCapName(property);
    		UmlClassByPropertyWrap named=new UmlClassByPropertyWrap(property);
    		String byPropertyValue=named.getValueName();
    		String byPropertyValueCamelName=named.getValueName();
    		//String byPropertyValueGetAccessor=named.getValueGetAccessor();
    stringBuffer.append(TEXT_632);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_633);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_634);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_635);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_636);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_637);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_638);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_639);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_640);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_641);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_642);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_643);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_644);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_645);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_646);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_647);
    List<Property> O2MSearchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);
    if(null!=O2MSearchList&&O2MSearchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:O2MSearchList){
    		if(property.getName().equals(searchProperty.getName()))continue;
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(property);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_648);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_649);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_650);
    stringBuffer.append(propertyCommentName);
    		importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_651);
    		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_652);
    		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_653);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_654);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_655);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_656);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_657);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_658);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_659);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_660);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_661);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_662);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_663);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_664);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_665);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_666);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_667);
    stringBuffer.append(propertyCommentName);
    		}
     }
    stringBuffer.append(TEXT_668);
    }else{
    stringBuffer.append(TEXT_669);
    }
    stringBuffer.append(TEXT_670);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_671);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_672);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_673);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_674);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_675);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_676);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_677);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_678);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_679);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_680);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_681);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_682);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_683);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_684);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_685);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_686);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_687);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_688);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_689);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_690);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_691);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_692);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_693);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_694);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:searchList){
    		if(TreeStereotypeHelper.isParentIdProperty(searchProperty)){
    			continue;
    		}
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_695);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_696);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_697);
    stringBuffer.append(propertyCommentName);
    			importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_698);
    			importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_699);
    			importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_700);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_701);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_702);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_703);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_704);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_705);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_706);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_707);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_708);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_709);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_710);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_711);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_712);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_713);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_714);
    stringBuffer.append(propertyCommentName);
    		}
     }
    }
    stringBuffer.append(TEXT_715);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_716);
    stringBuffer.append(uml2ClassIdPropertyUncapSafeName);
    stringBuffer.append(TEXT_717);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_718);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_719);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_720);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_721);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_722);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_723);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_724);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_725);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_726);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_727);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_728);
    stringBuffer.append(named.getSetValueMethod());
    stringBuffer.append(TEXT_729);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_730);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_731);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_732);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_733);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_734);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_735);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_736);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_737);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_738);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_739);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_740);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_741);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_742);
    stringBuffer.append(named.getSetValueMethod());
    stringBuffer.append(TEXT_743);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_744);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_745);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_746);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_747);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_748);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_749);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_750);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_751);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_752);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_753);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_754);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_755);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_756);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_757);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_758);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_759);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_760);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_761);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_762);
    }
    /********process M2OPropertyList end********/
    stringBuffer.append(TEXT_763);
    importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());
    	}
    }else{//只应用了Entity
    Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();
    
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//generic service impl
ClassNameDefineCommon serviceGenericImplDefine=clazzWrap.getNameDefineServiceGenericImpl();
String serviceGenericImplClassName=serviceGenericImplDefine.getClassCapName();
String serviceGenericImplUncapClassName=serviceGenericImplDefine.getClassUncapName();
String serviceGenericImplPackageName=serviceGenericImplDefine.getPackageQualifiedName();


    stringBuffer.append(TEXT_764);
    stringBuffer.append(serviceGenericImplPackageName);
    stringBuffer.append(TEXT_765);
    ImportManager importManager = ImportHelper.makeImportManager("");
    
// add imports
importManager.addImport("java.util.List");
importManager.addImport("org.springframework.beans.factory.annotation.Autowired");
importManager.addImport("com.jeefuse.base.modules.condition.order.Order");
importManager.addImport("com.jeefuse.base.utils.page.Page");
importManager.addImport("com.jeefuse.base.modules.condition.criteria.Condition");
//importManager.addImport("org.springframework.util.Assert");
importManager.addImport(Config.base_ServiceGenericImplQualifiedName);
String baseServiceGenericImplClassName=MdaHelper.getBriefClassName(Config.base_ServiceGenericImplQualifiedName);

//base
String baseHibernateDaoName=ImportHelper.getImportedName(Config.base_HibernateDao);
String baseHibernateDaoUncapName=NameHelper.uncapName(baseHibernateDaoName);

//model RTO define
ClassNameDefineCommon rtoDefine=clazzWrap.getNameDefineRTO();
String modelRTOQualifiedName=rtoDefine.getClassQualifiedName();
String modelRTOName=rtoDefine.getClassCapName();
importManager.addImport(modelRTOQualifiedName);

//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);

//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);

// generic service
ClassNameDefineCommon serviceGenericDefine=clazzWrap.getNameDefineServiceGeneric();
String modelServiceGenericQualifiedName=serviceGenericDefine.getClassQualifiedName();
String modelServiceGenericClassName=serviceGenericDefine.getClassCapName();
importManager.addImport(modelServiceGenericQualifiedName);

    stringBuffer.append(TEXT_766);
    
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());

    stringBuffer.append(TEXT_767);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_768);
    stringBuffer.append(System.getProperty("user.name"));
    stringBuffer.append(TEXT_769);
    stringBuffer.append(ImportHelper.getImportedName("org.springframework.stereotype.Service"));
    stringBuffer.append(TEXT_770);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_771);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_772);
    stringBuffer.append(baseServiceGenericImplClassName);
    stringBuffer.append(TEXT_773);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_774);
    stringBuffer.append(EntityHelper.getIDPropertyImportType(uml2Class));
    stringBuffer.append(TEXT_775);
    stringBuffer.append(modelServiceGenericClassName);
    stringBuffer.append(TEXT_776);
    stringBuffer.append(serviceGenericImplUncapClassName);
    stringBuffer.append(TEXT_777);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_778);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_779);
    stringBuffer.append(serviceGenericImplClassName);
    stringBuffer.append(TEXT_780);
    stringBuffer.append(baseHibernateDaoName);
    stringBuffer.append(TEXT_781);
    stringBuffer.append(baseHibernateDaoUncapName);
    stringBuffer.append(TEXT_782);
    stringBuffer.append(baseHibernateDaoUncapName);
    stringBuffer.append(TEXT_783);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_784);
    importManager.addImport("com.jeefuse.base.exception.ValidateViolationException");
    importManager.addImport("org.springframework.transaction.annotation.Transactional");
    stringBuffer.append(TEXT_785);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_786);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_787);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_788);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_789);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_790);
    importManager.addImport("com.jeefuse.base.exception.AppAssert");
    stringBuffer.append(TEXT_791);
    /*if(EntityHelper.hasIdAssign(uml2Class)){
    stringBuffer.append(TEXT_792);
    }*/
    stringBuffer.append(TEXT_793);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_794);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_795);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_796);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_797);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_798);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_799);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_800);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_801);
    stringBuffer.append(modelFieldUncapName);
    stringBuffer.append(TEXT_802);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_803);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_804);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_805);
    List<Property> searchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);
    if(null!=searchList&&searchList.size()>0){
    	int countNum=1;
    	for(Property property:searchList){
    		String propertyUncapSafeName=NameHelper.uncapSafeName(property);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(property);
    /********process date property********/
    		if(TypeHelper.isDate(property)&&ViewSearchHelper.isBetweenOperator(property)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(property);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(property);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(property);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_806);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_807);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_808);
    stringBuffer.append(propertyCommentName);
    		importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_809);
    		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_810);
    		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_811);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_812);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_813);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_814);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_815);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_816);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_817);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_818);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_819);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_820);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_821);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_822);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_823);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(property, modelFieldName, "rto"));
    stringBuffer.append(TEXT_824);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_825);
    stringBuffer.append(propertyCommentName);
    		}
     	}
    stringBuffer.append(TEXT_826);
    }else{
    stringBuffer.append(TEXT_827);
    }
    stringBuffer.append(TEXT_828);
    importManager.addImport("com.jeefuse.base.web.result.ResultMsg");
    importManager.addImport("java.lang.StringBuilder");
    importManager.addImport("java.util.ArrayList");
    importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    importManager.addImport("org.apache.commons.beanutils.PropertyUtils");
    stringBuffer.append(TEXT_829);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_830);
    stringBuffer.append(MethodNamedRuleKind.importDatas.getRuleNamed(uml2Class));
    stringBuffer.append(TEXT_831);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_832);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_833);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_834);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_835);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_836);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_837);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_838);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_839);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_840);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_841);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_842);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_843);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_844);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_845);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_846);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_847);
    
/*****************************************************************
 * apply keyLabel start
/*****************************************************************/

    stringBuffer.append(TEXT_848);
    	if(KeyLabelStereotypeHelper.isApply(uml2Class)){
    		importManager.addImport("com.jeefuse.base.modules.keyLabel.KeyLabel");
    		Property listKeyProperty=KeyLabelStereotypeHelper.getProperty_liskKey(uml2Class);
    stringBuffer.append(TEXT_849);
    		String listKeyPropertyName=NameHelper.uncapSafeName(listKeyProperty);
    		Property listLabelProperty=KeyLabelStereotypeHelper.getProperty_listLabel(uml2Class);
    stringBuffer.append(TEXT_850);
    		String listLabelPropertyName=NameHelper.uncapSafeName(listLabelProperty);
    stringBuffer.append(TEXT_851);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_852);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_853);
    stringBuffer.append(listKeyPropertyName);
    stringBuffer.append(TEXT_854);
    stringBuffer.append(listLabelPropertyName);
    stringBuffer.append(TEXT_855);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_856);
    	}
    
/*****************************************************************
 * apply keyLabel end
/*****************************************************************/

    
/*****************************************************************
 * 构造gallary start
/*****************************************************************/

    if(FileStereotypeHelper.isClass_Image(uml2Class)){
    	//Property propertyFileSavePath=FileStereotypeHelper.getPropertyApplyFileSavePath(uml2Class);
    	//Property propertyTitle=PropertyStereotypeHelper.getPropertyApplyTitle(uml2Class);
    	//Property propertyIntro=PropertyStereotypeHelper.getPropertyApplyIntro(uml2Class);
    	//Property propertyContent=PropertyStereotypeHelper.getPropertyApplyContent(uml2Class);
    	String gallaryListContructArgs=FileStereotypeHelper.getGallaryListContructArgsForHql(uml2Class);
    stringBuffer.append(TEXT_857);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_858);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_859);
    stringBuffer.append(gallaryListContructArgs);
    stringBuffer.append(TEXT_860);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_861);
    	}
    stringBuffer.append(TEXT_862);
    
/*****************************************************************
 * 构造gallary end
/*****************************************************************/

    stringBuffer.append(TEXT_863);
    /********process M2OPropertyList start********/
    stringBuffer.append(TEXT_864);
    List<Property> M2OPropertyList=EntityHelper.getAllManyToOnePropertiesAndApplyManageByProperty(uml2Class,false);
    for (Iterator<Property> iter=M2OPropertyList.iterator();iter.hasNext();){
    		Property property=iter.next();
     		//String propertyComment=TypeHelper.getDocumentationOrName(property);
    		//String propertyGet=ClassHelper.getGetAccessor(property);
     		String propertyUncapName=NameHelper.uncapSafeName(property);
     		String propertyName=NameHelper.getCapName(property);
    		UmlClassByPropertyWrap named=new UmlClassByPropertyWrap(property);
    		String byPropertyValue=named.getValueName();
    		String byPropertyValueCamelName=named.getValueNameWithUnderLine();
    		//String byPropertyValueGetAccessor=named.getValueGetAccessor();
    stringBuffer.append(TEXT_865);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_866);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_867);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_868);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_869);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_870);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_871);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_872);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_873);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_874);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_875);
    		importManager.addImport("com.jeefuse.base.exception.AppAssert");
    stringBuffer.append(TEXT_876);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_877);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_878);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_879);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_880);
    List<Property> O2MSearchList=ViewSearchHelper.getSearchTextFieldPropertiesFromSimple(uml2Class);
    if(null!=O2MSearchList&&O2MSearchList.size()>0){
    	int countNum=1;
    	for(Property searchProperty:O2MSearchList){
    		if(property.getName().equals(searchProperty.getName()))continue;
    		String propertyUncapSafeName=NameHelper.uncapSafeName(searchProperty);
    		String propertyCommentName=TypeHelper.getDocumentationOrName(searchProperty);
    /********process date property********/
    		if(TypeHelper.isDate(searchProperty)&&ViewSearchHelper.isBetweenOperator(searchProperty)){
    			//String operatorStr=ViewSearchHelper.getSearchOperator(searchProperty);
    			String searchFieldName=ViewSearchHelper.getSearchFieldName(searchProperty);
    			String searchFieldCapName=NameHelper.getCapName(searchFieldName);
    			String searchFieldTwoName=ViewSearchHelper.getSearchFieldTwoName(searchProperty);
    			String searchFieldTwoCapName=NameHelper.getCapName(searchFieldTwoName);
    stringBuffer.append(TEXT_881);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_882);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_883);
    stringBuffer.append(propertyCommentName);
    		importManager.addImport("java.util.Date");
    stringBuffer.append(TEXT_884);
    		importManager.addImport("com.jeefuse.base.utils.common.DateUtil");
    stringBuffer.append(TEXT_885);
    		importManager.addImport("org.apache.commons.lang.xwork.StringUtils");
    stringBuffer.append(TEXT_886);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_887);
    stringBuffer.append(searchFieldCapName);
    stringBuffer.append(TEXT_888);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_889);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_890);
    stringBuffer.append(searchFieldName);
    stringBuffer.append(TEXT_891);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_892);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_893);
    stringBuffer.append(searchFieldTwoCapName);
    stringBuffer.append(TEXT_894);
    stringBuffer.append(modelFieldName);
    stringBuffer.append(TEXT_895);
    stringBuffer.append(propertyUncapSafeName);
    stringBuffer.append(TEXT_896);
    stringBuffer.append(searchFieldTwoName);
    stringBuffer.append(TEXT_897);
    		}
    /********process common property********/
    		else{
    stringBuffer.append(TEXT_898);
    stringBuffer.append(ViewSearchHelper.getSearchFieldRtoCondition(searchProperty, modelFieldName, "rto"));
    stringBuffer.append(TEXT_899);
    stringBuffer.append(countNum++);
    stringBuffer.append(TEXT_900);
    stringBuffer.append(propertyCommentName);
    		}
     }
    stringBuffer.append(TEXT_901);
    }else{
    stringBuffer.append(TEXT_902);
    }
    stringBuffer.append(TEXT_903);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_904);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_905);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_906);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_907);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_908);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_909);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_910);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_911);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_912);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_913);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_914);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_915);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_916);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_917);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_918);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_919);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_920);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_921);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_922);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_923);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_924);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_925);
    stringBuffer.append(named.getSetValueMethod());
    stringBuffer.append(TEXT_926);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_927);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_928);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_929);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_930);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_931);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_932);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_933);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_934);
    stringBuffer.append(modelRTOName);
    stringBuffer.append(TEXT_935);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_936);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_937);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_938);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_939);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_940);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_941);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_942);
    stringBuffer.append(named.getSetValueMethod());
    stringBuffer.append(TEXT_943);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_944);
    stringBuffer.append(modelEntityUncapName);
    stringBuffer.append(TEXT_945);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_946);
    stringBuffer.append(propertyUncapName);
    stringBuffer.append(TEXT_947);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_948);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_949);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_950);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_951);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_952);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_953);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_954);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_955);
    	if(KeyLabelStereotypeHelper.isApply(uml2Class)){
    		importManager.addImport("com.jeefuse.base.modules.keyLabel.KeyLabel");
    		Property listKeyProperty=KeyLabelStereotypeHelper.getProperty_liskKey(uml2Class);
    stringBuffer.append(TEXT_956);
    		String listKeyPropertyName=NameHelper.uncapSafeName(listKeyProperty);
    		Property listLabelProperty=KeyLabelStereotypeHelper.getProperty_listLabel(uml2Class);
    stringBuffer.append(TEXT_957);
    		String listLabelPropertyName=NameHelper.uncapSafeName(listLabelProperty);
    stringBuffer.append(TEXT_958);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_959);
    stringBuffer.append(modelCommentName);
    stringBuffer.append(TEXT_960);
    stringBuffer.append(propertyName);
    stringBuffer.append(TEXT_961);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_962);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_963);
    stringBuffer.append(named.getComment());
    stringBuffer.append(TEXT_964);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_965);
    stringBuffer.append(listKeyPropertyName);
    stringBuffer.append(TEXT_966);
    stringBuffer.append(listLabelPropertyName);
    stringBuffer.append(TEXT_967);
    stringBuffer.append(modelEntityName);
    stringBuffer.append(TEXT_968);
    stringBuffer.append(byPropertyValue);
    stringBuffer.append(TEXT_969);
    stringBuffer.append(byPropertyValueCamelName);
    stringBuffer.append(TEXT_970);
    	}
    }
    /********process M2OPropertyList end********/
    stringBuffer.append(TEXT_971);
    importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());
    }
    stringBuffer.append(TEXT_972);
    return stringBuffer.toString();
  }
}
