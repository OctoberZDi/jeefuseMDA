<%@ jet package="com.jeefuse.mda.gen.template.main.java.render" imports="net.taylor.mda.generator.parse.NameRuled.className.* net.taylor.mda.generator.parse.NameRuled.* java.util.List net.taylor.mda.generator.parse.* net.taylor.mda.generator.parse.entity.* java.util.Iterator org.eclipse.uml2.uml.Class org.eclipse.uml2.uml.Package org.eclipse.uml2.uml.* net.taylor.mda.generator.util.* org.eclipse.emf.codegen.util.*" class="EntityRenderUtilManageByProperty" %>
<%Property curProperty = (Property) argument;Package propertyPackage = curProperty.getNearestPackage();%>
<%
/******property wrap*******/
UmlPropertyWrap propertyWrap=new UmlPropertyWrap(curProperty);
String curPropertyCapName=propertyWrap.getCapName();
//String curPropertyUnCapName=propertyWrap.getUncapName();
String curPropertyComment=propertyWrap.getCommentName();
Class ownerClass=(Class)curProperty.getOwner();
UmlClassWrap clazzWrap=new UmlClassWrap(ownerClass);
String ownerClassCommentName=clazzWrap.getCommentName();

/******** clazz by property wrap ********/
UmlClassByPropertyWrap clazzByPropertyWrap=new UmlClassByPropertyWrap(curProperty);

/******** clazz by Property action define********/
ClassNameDefineByPropertyCommon renderUtilByProperty=clazzByPropertyWrap.getNameDefineRenderUtilByProperty();
String renderUtilPackageName=renderUtilByProperty.getPackageQualifiedName();
String renderUtilClassName=renderUtilByProperty.getClassName();
%><%@ include file="../../../../Header.jetinc"%>
package <%=renderUtilPackageName%>;
<%ImportManager	importManager = ImportHelper.makeImportManager("");%>
<%importManager.addImport("java.util.List");%>
<%//importManager.addImport("com.jeefuse.base.modules.json.JsonWriter");%>
<%importManager.addImport("com.jeefuse.base.utils.page.Page");%>
<%importManager.addImport("com.jeefuse.base.web.utils.RenderUtil");%>
<%//importManager.addImport("com.jeefuse.base.web.result.ResultMsg");%>
<%importManager.addImport("com.jeefuse.base.modules.json.ResultJsonWriter");%>
<%importManager.addImport("com.jeefuse.base.modules.json.FlexidGridJsonWriter");%>
<%
//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
importManager.addImport(modelEntityQualifiedName);

// flexiGridJsonWriter by Property  define
ClassNameDefineByPropertyCommon flexiGridJsonWriterByProperty=clazzByPropertyWrap.getNameDefineFlexiGridJsonWriterByProperty();
String flexiGridJsonWriterByPropertyClassName=flexiGridJsonWriterByProperty.getClassName();
String flexiGridJsonWriterByPropertyClassQualifiedName=flexiGridJsonWriterByProperty.getClassQualifiedName();
importManager.addImport(flexiGridJsonWriterByPropertyClassQualifiedName);

//  ResultJsonWriter by property define
ClassNameDefineByPropertyCommon resultMsgJsonWriterByProperty=clazzByPropertyWrap.getNameDefineResultMsgJsonWriterByProperty();
String resultMsgJsonWriterByPropertyClassName=resultMsgJsonWriterByProperty.getClassName();
String resultMsgJsonWriterByPropertyQualifiedName=resultMsgJsonWriterByProperty.getClassQualifiedName();
importManager.addImport(resultMsgJsonWriterByPropertyQualifiedName);

%>
<%
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());
%>

/**
 * <%=ownerClassCommentName%> by <%=curPropertyComment%> render util.
 * 
 * @author <%=System.getProperty("user.name")%>
 * @generated
 */
public class <%=renderUtilClassName%>  {

	/**
	 * 输出 <%=modelEntityName%> by <%=curPropertyComment%> ResultMsg json对象格式数据.
	 * 
	 * @generated
	 */
	static public void jsonResultMsgBy<%=curPropertyCapName%>(boolean success, <%=modelEntityName%> model, String message) {
		ResultJsonWriter<<%=modelEntityName%>> jsonWriter=new <%=resultMsgJsonWriterByPropertyClassName%>(success, model, message);
		RenderUtil.renderJson(jsonWriter);
	}
<%/********is apply tree********/%>
<%if(ModelStereoTypeHelper.isApplyModel_Tree(ownerClass)){%>
<%importManager.addImport("com.jeefuse.base.modules.json.FlexidTreeGridJsonWriter");%>
<%importManager.addImport("com.jeefuse.base.modules.tree.renders.generic.TreeNodeGeneric");%>
	/**
	 * 输出 <%=modelEntityName%> by <%=curPropertyComment%> ResultMsg html对象格式数据.
	 * 
	 * @generated
	 */
	public static void htmlResultMsgBy<%=curPropertyCapName%>(boolean success, <%=modelEntityName%> model, String message) {
		ResultJsonWriter<GlDiningMenu> jsonWriter = new <%=resultMsgJsonWriterByPropertyClassName%>(success, model, message);
		RenderUtil.renderHtml(jsonWriter);
	}
	
<%}%>
	/**
	 * 输出<%=modelEntityName%> by <%=curPropertyComment%> FlexiGrid json对象格式数据.
	 * 
	 * @generated
	 */
	static public void jsonFlexiGridBy<%=curPropertyCapName%>(int pageNo, long total, List<<%=modelEntityName%>> items) {
		FlexidGridJsonWriter<<%=modelEntityName%>> jsonWriter = new <%=flexiGridJsonWriterByPropertyClassName%>(pageNo, total, items);
		RenderUtil.renderJson(jsonWriter);
	}
	
	/**
	 * 输出<%=modelEntityName%> by <%=curPropertyComment%> FlexiGrid json对象格式数据.
	 * 
	 * @generated
	 */
	static public void jsonFlexiGridBy<%=curPropertyCapName%>(Page<<%=modelEntityName%>> page) {
		jsonFlexiGridBy<%=curPropertyCapName%>(page.getPageNo(), page.getTotalCount(), page.getResult());
	}
	
<%/********is apply tree********/%>
<%if(ModelStereoTypeHelper.isApplyModel_Tree(ownerClass)){%>
<%
// model treeGridJsonWriter By Property
ClassNameDefineByPropertyCommon treeGridJsonWriterByProperty=clazzByPropertyWrap.getNameDefineTreeGridJsonWriterByProperty();
String treeGridJsonWriterByPropertyQualifiedName=treeGridJsonWriterByProperty.getClassQualifiedName();
String treeGridJsonWriterByPropertyClassName=treeGridJsonWriterByProperty.getClassName();
importManager.addImport(treeGridJsonWriterByPropertyQualifiedName);
%>
	/**
	 * 输出<%=modelEntityName%> by <%=curPropertyComment%> FlexiTreeGrid json对象格式数据.
	 * 
	 */
	public static void jsonFlexiTreeGridBy<%=curPropertyCapName%>(long totalCount, List<<%=modelEntityName%>> items) {
		TreeNodeGeneric<<%=modelEntityName%>> treeNode = TreeNodeGenericConstructUtil.constructTreeNode(items);
		JsonWriter jsonWriter = new <%=treeGridJsonWriterByPropertyClassName%>(treeNode.getChildrens(), totalCount);
		RenderUtil.renderJson(jsonWriter);
	}
<%}%>
		
}
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>