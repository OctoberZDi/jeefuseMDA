<%@ jet package="com.jeefuse.mda.gen.template.main.java.imports" imports="net.taylor.mda.generator.parse.NameRuled.className.* net.taylor.mda.generator.parse.NameRuled.*  java.util.ArrayList net.taylor.mda.generator.parse.entity.* net.taylor.mda.generator.parse.* java.util.Iterator java.util.List net.taylor.mda.generator.parse.entity.* org.eclipse.uml2.uml.Class org.eclipse.uml2.uml.Package org.eclipse.uml2.uml.* net.taylor.mda.generator.util.*  org.eclipse.emf.codegen.util.*" class="EntityExcelImport" %>
<%Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();%>
<%
/*******clazz wrap********/	
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//model excelImport define
ClassNameDefineCommon importExcel=clazzWrap.getNameDefineImportExcel();
String modelExcelImportPackageName=importExcel.getPackageQualifiedName();
String modelExcelImportClassName=importExcel.getClassCapName();

%>
<%@ include file="../../../../Header.jetinc"%>
package <%=modelExcelImportPackageName%>;
<%ImportManager importManager = ImportHelper.makeImportManager("");%>

<%
//add imports
importManager.addImport("java.io.IOException");
importManager.addImport("java.io.InputStream");
importManager.addImport("org.apache.poi.ss.usermodel.Cell");
importManager.addImport("org.apache.poi.ss.usermodel.Row");
//add custom imports
importManager.addImport(Config.base_ExcelCheck);
importManager.addImport(Config.base_AbstractModelExcelImport);
importManager.addImport(Config.base_Exception_DataNoExistException);
//Abastract Model Excel ClassName
String base_AbastractModelExcelClassName=MdaHelper.getBriefClassName(Config.base_AbstractModelExcelImport);


//model validate
ClassNameDefineCommon validateDefine=clazzWrap.getNameDefineValidate();
//String modelValidateDefinePackageName=validateDefine.getPackageQualifiedName();
String modelValidateDefineClassName=validateDefine.getClassCapName();
String modelValidateDefineClassQualifiedName=validateDefine.getClassQualifiedName();
importManager.addImport(modelValidateDefineClassQualifiedName);


//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);


//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
importManager.addImport(modelEntityQualifiedName);

%>

<%
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());
%>

/**
 * <%=modelCommentName%> excel导入.
 *
 * @author <%=System.getProperty("user.name")%>
 * @generated
 */
public class <%=modelExcelImportClassName%> extends <%=base_AbastractModelExcelClassName%><<%=modelEntityName%>>{

	/**
	 * construct <%=modelExcelImportClassName%> with inputStream.
	 * 
	 * @generated
	 */
	public <%=modelExcelImportClassName%>(InputStream is) throws IOException {
		super(is);
	}

	/**
	 * populate model.
	 * 
	 * @generated
	 */
	@Override
	protected <%=modelEntityName%> readExcelToModel(Row row, String[] columnNames) {
		if (row == null)
			return null;
		<%=modelEntityName%> model = new <%=modelEntityName%>();
		int cellLenght = columnNames.length;
		Cell cell = null;
		for (int i = 0; i < cellLenght; i++) {
			cell = row.getCell(i);
			String columnName = columnNames[i];
<%importManager.addImport("java.util.ArrayList");%>
<%importManager.addImport("java.util.List");%>
<%importManager.addImport("org.hibernate.validator.InvalidValue");%>
<%importManager.addImport("com.jeefuse.base.exception.ValidateViolationException");%>
			<%=modelFieldName%> <%=modelFieldUncapName%> = <%=modelFieldName%>.valueOfFieldLabel(columnName);
			if (null == <%=modelFieldUncapName%>) {
				<%=modelFieldUncapName%> = <%=modelFieldName%>.valueOfFieldName(columnName);
			}
			if (null == <%=modelFieldUncapName%>)
				throw new DataNoExistException("无效例名:" + columnName);
			setModelData(model, cell, <%=modelFieldUncapName%>);
			InvalidValue[] invalidValues = <%=modelValidateDefineClassName%>.validateProperty(model, <%=modelFieldUncapName%>);
			if (invalidValues.length > 0) {
				List<String> errors = new ArrayList<String>();
				for (InvalidValue invalidValue : invalidValues) {
					errors.add(<%=modelFieldUncapName%>.getFieldLabel() + ": " + invalidValue.getMessage());
				}
				throw new ValidateViolationException("第" + (cell.getRowIndex() + 1) + "行,第"
						+ (cell.getColumnIndex() + 1) + "例输入错误!", errors);
			}
		}
		return model;
	}

	/**
	 * populate model property value.
	 * 
	 * @generated
	 */
	private void setModelData(<%=modelEntityName%> model, Cell cell, <%=modelFieldName%> <%=modelFieldUncapName%>) {
		switch (<%=modelFieldUncapName%>) {
<%List<Property> listProperty=ClassHelper.getAllSimplePropertiesList(uml2Class,new ArrayList<Property>());int propertyCount=1;%>
<%for (Iterator<Property> i=listProperty.iterator(); i.hasNext();) { Property property = (Property)i.next();%>
<%	if (property.getType() !=null) {%>
<%		//String propertyUncapSafeName=NameHelper.uncapSafeName(property);%>
<%  	//String propertyGetAccessor=ClassHelper.getGetAccessor(property);%>
<%		String propretyGetAccessorName=ClassHelper.getAccessorName(property);%>
<%  	String propertyCommentName=TypeHelper.getDocumentationOrName(property);%>
<%		Enumeration enumeration=EnumKindHelper.getAppliedEnumKindEnumeration(property);%>
		case <%=NameHelper.uncapSafeName(property)%>:
<%		if(null!=enumeration){%>
<%			String modelEnumQualifiedName=MdaHelper.getModelQualifiedName(enumeration,PKGSuffix.enumeration,ModelNameSuffix.enumeration);%>
<%			String modelEnumName=MdaHelper.getModelClassName(enumeration,ModelNameSuffix.enumeration);%>
<%			String modelEnumNameUncap=NameHelper.uncapName(modelEnumName);%>
<%			importManager.addImport(modelEnumQualifiedName);%>
			<%=modelEnumName%> <%=modelEnumNameUncap%> = <%=modelEnumName%>.valueOfLabel(ExcelCheck.<%=ExcelImportHelper.getExcelCheckString(property.getType())%>(cell));
			if (null != <%=modelEnumNameUncap%>) {
				model.set<%=propretyGetAccessorName%>(<%=modelEnumNameUncap%>.getKey());//<%=propertyCount++%> <%=propertyCommentName%>
			} else {
				model.set<%=propretyGetAccessorName%>(null);
			}
<%		}else{%>
			 model.set<%=propretyGetAccessorName%>(ExcelCheck.<%=ExcelImportHelper.getExcelCheckString(property.getType())%>(cell));//<%=propertyCount++%> <%=propertyCommentName%>
<%		}%>
			 break;
<%}}%>	
		}
	}
	
}
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>
