<%@ jet package="com.jeefuse.mda.gen.template.main.java.entity.validate" imports="net.taylor.mda.generator.parse.NameRuled.className.* net.taylor.mda.generator.parse.NameRuled.* java.util.ArrayList net.taylor.mda.generator.parse.* java.util.Iterator java.util.List net.taylor.mda.generator.parse.entity.* org.eclipse.uml2.uml.Class org.eclipse.uml2.uml.Package org.eclipse.uml2.uml.* net.taylor.mda.generator.util.* org.eclipse.emf.codegen.util.*" class="EntityValidateJpa" %>
<%Class uml2Class = (Class) argument;Package uml2Package = uml2Class.getPackage();%>
<%
/*******clazz wrap********/	
UmlClassWrap clazzWrap=new UmlClassWrap(uml2Class);
String modelCommentName=clazzWrap.getCommentName();

//model validate
ClassNameDefineCommon validateDefine=clazzWrap.getNameDefineValidate();
String modelValidateDefinePackageName=validateDefine.getPackageQualifiedName();
String modelValidateDefineClassName=validateDefine.getClassCapName();

%>
<%@ include file="../../../../Header.jetinc"%>
package <%=modelValidateDefinePackageName%>;
<%ImportManager importManager = ImportHelper.makeImportManager("");%>
<%importManager.addImport("java.util.ArrayList");%>
<%importManager.addImport("java.util.List");%>
<%importManager.addImport("java.util.Set");%>
<%importManager.addImport("javax.validation.ConstraintViolation");%>
<%importManager.addImport("com.jeefuse.base.exception.ValidateViolationException");%>
<%importManager.addImport("com.jeefuse.base.model.validate.ValidateUtil");%>
<%
//model entity define
ClassNameDefineCommon entityDefine=clazzWrap.getNameDefineEntity();
String modelEntityQualifiedName=entityDefine.getClassQualifiedName();
String modelEntityName=entityDefine.getClassCapName();
String modelEntityUncapName=entityDefine.getClassUncapName();
importManager.addImport(modelEntityQualifiedName);


//model field 
ClassNameDefineCommon entityFieldDefine=clazzWrap.getNameDefineEntityField();
String modelFieldQualifiedName=entityFieldDefine.getClassQualifiedName();
String modelFieldName=entityFieldDefine.getClassName();
String modelFieldUncapName=entityFieldDefine.getClassUncapName();
importManager.addImport(modelFieldQualifiedName);
%>

<%
StringBuffer importStringBuffer = stringBuffer;
int importInsertionPoint = stringBuffer.length();
importManager.addCompilationUnitImports(stringBuffer.toString());
%>
/**
 * <%=modelCommentName%>  validate.
 *
 * @author <%=System.getProperty("user.name")%>
 * @generated
 */
public class <%=modelValidateDefineClassName%> {

	/**
	 * 验证<%=modelEntityName%>对象,返回约束违反错误集合.
	 * @generated
	 */
	static public Set<ConstraintViolation<<%=modelEntityName%>>> validate(<%=modelEntityName%> <%=modelEntityUncapName%>) {
		Set<ConstraintViolation<<%=modelEntityName%>>> constraintViolations = ValidateUtil.validate(<%=modelEntityUncapName%>);
		return constraintViolations;
	}

	/**
	 * 验证<%=modelEntityName%>对象,若出现约束违反错误则抛出ValidateViolationException异常.
	 * @generated
	 */
	static public void validateWithException(<%=modelEntityName%> <%=modelEntityUncapName%>) throws ValidateViolationException {
		Set<ConstraintViolation<<%=modelEntityName%>>> constraintViolations = validate(<%=modelEntityUncapName%>);
		if (!constraintViolations.isEmpty()) {
			List<String> errors = new ArrayList<String>();
			for (ConstraintViolation<?> violation : constraintViolations) {
				<%=modelFieldName%> <%=modelFieldUncapName%> = <%=modelFieldName%>.valueOfFieldName(violation.getPropertyPath().toString());
				if (null != <%=modelFieldUncapName%>) {
					errors.add(<%=modelFieldUncapName%>.getFieldLabel()+": "+violation.getMessage());
				} else {
					errors.add(violation.getMessage());
				}
			}
			throw new ValidateViolationException(errors);
		}
	}

	/**
	 * 验证<%=modelEntityName%>对象属性,返回约束违反集合.
	 * @generated
	 */
	static public Set<ConstraintViolation<<%=modelEntityName%>>> validateProperty(<%=modelEntityName%> <%=modelEntityUncapName%>,<%=modelFieldName%> <%=modelFieldUncapName%>) {
		Set<ConstraintViolation<<%=modelEntityName%>>> constraintViolations = ValidateUtil.validateProperty(<%=modelEntityUncapName%>, <%=modelFieldUncapName%>);
		return constraintViolations;
	}

	/**
	 * 验证<%=modelEntityName%>对象属性,若出现异常则抛出ValidateViolationException异常.
	 * @generated
	 */
	static public void validatePropertyWithException(<%=modelEntityName%> <%=modelEntityUncapName%>,<%=modelFieldName%> <%=modelFieldUncapName%>) throws ValidateViolationException {
		Set<ConstraintViolation<<%=modelEntityName%>>> constraintViolations = validateProperty(<%=modelEntityUncapName%>, <%=modelFieldUncapName%>);
		if (!constraintViolations.isEmpty()) {
			List<String> errors = new ArrayList<String>();
			for (ConstraintViolation<?> violation : constraintViolations) {
				errors.add(<%=modelFieldUncapName%>.getFieldLabel() + ":" + violation.getMessage());
			}
			throw new ValidateViolationException(errors);
		}
	}
	
}
<%importStringBuffer.insert(importInsertionPoint, importManager.computeSortedImports());%>
